{
  "api/CryptoCompare.HistoryDayAverageResponse.html": {
    "href": "api/CryptoCompare.HistoryDayAverageResponse.html",
    "title": "Class HistoryDayAverageResponse | CryptoCompare C# client",
    "keywords": "Class HistoryDayAverageResponse A history day average response. TODO: replace ReadOnlyDictionary<string, object> by ReadOnlyDictionary<string, decimal> Inheritance Object ReadOnlyDictionary < String , Object > HistoryDayAverageResponse Implements IDictionary < String , Object > ICollection < KeyValuePair < String , Object >> IReadOnlyDictionary < String , Object > IReadOnlyCollection < KeyValuePair < String , Object >> IEnumerable < KeyValuePair < String , Object >> IDictionary ICollection IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.get_Item(System.String) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.set_Item(System.String, System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ReadOnlyDictionary<String, Object>.ContainsKey(String) ReadOnlyDictionary<String, Object>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Object>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Add(System.String, System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Remove(System.String) ReadOnlyDictionary<String, Object>.ICollection.CopyTo(Array, Int32) ReadOnlyDictionary<String, Object>.IDictionary.Add(Object, Object) ReadOnlyDictionary<String, Object>.IDictionary.Clear() ReadOnlyDictionary<String, Object>.IDictionary.Contains(Object) ReadOnlyDictionary<String, Object>.IDictionary.GetEnumerator() ReadOnlyDictionary<String, Object>.IDictionary.Remove(Object) ReadOnlyDictionary<String, Object>.IEnumerable.GetEnumerator() ReadOnlyDictionary<String, Object>.TryGetValue(String, Object) ReadOnlyDictionary<String, Object>.Count ReadOnlyDictionary<String, Object>.Dictionary ReadOnlyDictionary<String, Object>.Item[String] ReadOnlyDictionary<String, Object>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Item[System.String] System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Values System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Object>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>.Values ReadOnlyDictionary<String, Object>.ICollection.IsSynchronized ReadOnlyDictionary<String, Object>.ICollection.SyncRoot ReadOnlyDictionary<String, Object>.IDictionary.IsFixedSize ReadOnlyDictionary<String, Object>.IDictionary.IsReadOnly ReadOnlyDictionary<String, Object>.IDictionary.Item[Object] ReadOnlyDictionary<String, Object>.IDictionary.Keys ReadOnlyDictionary<String, Object>.IDictionary.Values ReadOnlyDictionary<String, Object>.Values Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class HistoryDayAverageResponse : ReadOnlyDictionary<string, object>, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IReadOnlyDictionary<string, object>, IReadOnlyCollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IDictionary, ICollection, IEnumerable Constructors HistoryDayAverageResponse(IDictionary<String, Object>) Declaration public HistoryDayAverageResponse(IDictionary<string, object> dictionary) Parameters Type Name Description IDictionary < String , Object > dictionary Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/CryptoCompare.NewsEntity.html": {
    "href": "api/CryptoCompare.NewsEntity.html",
    "title": "Class NewsEntity | CryptoCompare C# client",
    "keywords": "Class NewsEntity Inheritance Object NewsEntity Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class NewsEntity Properties Body Declaration [JsonProperty(\"body\")] public string Body { get; set; } Property Value Type Description String Guid Declaration [JsonProperty(\"guid\")] public string Guid { get; set; } Property Value Type Description String Id Declaration [JsonProperty(\"id\")] public long Id { get; set; } Property Value Type Description Int64 ImageUrl Declaration [JsonProperty(\"imageurl\")] public string ImageUrl { get; set; } Property Value Type Description String Lang Declaration [JsonProperty(\"lang\")] public string Lang { get; set; } Property Value Type Description String PublishDateUnix Declaration [JsonProperty(\"published_on\")] public long PublishDateUnix { get; set; } Property Value Type Description Int64 Source Declaration [JsonProperty(\"source\")] public string Source { get; set; } Property Value Type Description String SourceInfo Declaration [JsonProperty(\"source_info\")] public NewsProvider SourceInfo { get; set; } Property Value Type Description NewsProvider TagsString Declaration [JsonProperty(\"tags\")] public string TagsString { get; set; } Property Value Type Description String Title Declaration [JsonProperty(\"title\")] public string Title { get; set; } Property Value Type Description String Url Declaration [JsonProperty(\"url\")] public string Url { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.NewsClient.html": {
    "href": "api/CryptoCompare.NewsClient.html",
    "title": "Class NewsClient | CryptoCompare C# client",
    "keywords": "Class NewsClient Inheritance Object BaseApiClient NewsClient Implements IApiClient INewsClient Inherited Members BaseApiClient.GetAsync<TApiResponse>(Uri) BaseApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class NewsClient : BaseApiClient, IApiClient, INewsClient Constructors NewsClient(HttpClient) Declaration public NewsClient(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient Methods News(String, Nullable<Int64>, String[], Nullable<Boolean>) Declaration public Task<IEnumerable<NewsEntity>> News(string lang = null, long? lTs = default(long? ), string[] feeds = null, bool? sign = default(bool? )) Parameters Type Name Description String lang Nullable < Int64 > lTs String [] feeds Nullable < Boolean > sign Returns Type Description Task < IEnumerable < NewsEntity >> NewsProviders() Declaration public Task<IEnumerable<NewsProvider>> NewsProviders() Returns Type Description Task < IEnumerable < NewsProvider >> Implements IApiClient INewsClient"
  },
  "api/CryptoCompare.Calls.html": {
    "href": "api/CryptoCompare.Calls.html",
    "title": "Class Calls | CryptoCompare C# client",
    "keywords": "Class Calls Api calls. Inheritance Object Calls Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class Calls Properties Histo Calls to history apis. Declaration public int Histo { get; set; } Property Value Type Description Int32 News Calls to news api. Declaration public int News { get; set; } Property Value Type Description Int32 Price Calls to price apis. Declaration public int Price { get; set; } Property Value Type Description Int32"
  },
  "api/CryptoCompare.TopVolumesResponse.html": {
    "href": "api/CryptoCompare.TopVolumesResponse.html",
    "title": "Class TopVolumesResponse | CryptoCompare C# client",
    "keywords": "Class TopVolumesResponse Inheritance Object BaseApiResponse TopVolumesResponse Inherited Members BaseApiResponse.ErrorsSummary BaseApiResponse.IsSuccessfulResponse BaseApiResponse.Path BaseApiResponse.Status BaseApiResponse.StatusMessage BaseApiResponse.StatusType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class TopVolumesResponse : BaseApiResponse Properties Data Declaration public IReadOnlyList<TopVolumeInfo> Data { get; set; } Property Value Type Description IReadOnlyList < TopVolumeInfo > VolSymbol Declaration public string VolSymbol { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.ExchangeHistoryData.html": {
    "href": "api/CryptoCompare.ExchangeHistoryData.html",
    "title": "Class ExchangeHistoryData | CryptoCompare C# client",
    "keywords": "Class ExchangeHistoryData Inheritance Object ExchangeHistoryData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class ExchangeHistoryData Properties Time Declaration [JsonConverter(typeof(UnixTimeConverter))] public DateTimeOffset Time { get; set; } Property Value Type Description DateTimeOffset Volume Declaration public decimal Volume { get; set; } Property Value Type Description Decimal"
  },
  "api/CryptoCompare.CryptoCompare.html": {
    "href": "api/CryptoCompare.CryptoCompare.html",
    "title": "Class CryptoCompare | CryptoCompare C# client",
    "keywords": "Class CryptoCompare Inheritance Object CryptoCompare Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CryptoCompare Properties Comments Declaration [JsonProperty(\"Comments\")] public string Comments { get; set; } Property Value Type Description String CryptopianFollowers Declaration [JsonProperty(\"CryptopianFollowers\")] public CryptopianFollower[] CryptopianFollowers { get; set; } Property Value Type Description CryptopianFollower [] Followers Declaration [JsonProperty(\"Followers\")] public long Followers { get; set; } Property Value Type Description Int64 PageViews Declaration [JsonProperty(\"PageViews\")] public long PageViews { get; set; } Property Value Type Description Int64 PageViewsSplit Declaration [JsonProperty(\"PageViewsSplit\")] public PageViewsSplit PageViewsSplit { get; set; } Property Value Type Description PageViewsSplit Points Declaration [JsonProperty(\"Points\")] public long Points { get; set; } Property Value Type Description Int64 Posts Declaration [JsonProperty(\"Posts\")] public string Posts { get; set; } Property Value Type Description String SimilarItems Declaration [JsonProperty(\"SimilarItems\")] public SimilarItem[] SimilarItems { get; set; } Property Value Type Description SimilarItem []"
  },
  "api/CryptoCompare.CandleData.html": {
    "href": "api/CryptoCompare.CandleData.html",
    "title": "Class CandleData | CryptoCompare C# client",
    "keywords": "Class CandleData Inheritance Object CandleData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CandleData Properties Close Declaration public decimal Close { get; set; } Property Value Type Description Decimal High Declaration public decimal High { get; set; } Property Value Type Description Decimal Low Declaration public decimal Low { get; set; } Property Value Type Description Decimal Open Declaration public decimal Open { get; set; } Property Value Type Description Decimal Time Declaration [JsonConverter(typeof(UnixTimeConverter))] public DateTimeOffset Time { get; set; } Property Value Type Description DateTimeOffset VolumeFrom Declaration public decimal VolumeFrom { get; set; } Property Value Type Description Decimal VolumeTo Declaration public decimal VolumeTo { get; set; } Property Value Type Description Decimal"
  },
  "api/CryptoCompare.PriceMultiResponse.html": {
    "href": "api/CryptoCompare.PriceMultiResponse.html",
    "title": "Class PriceMultiResponse | CryptoCompare C# client",
    "keywords": "Class PriceMultiResponse Inheritance Object ReadOnlyDictionary < String , IReadOnlyDictionary < String , Decimal >> PriceMultiResponse Implements IDictionary < String , IReadOnlyDictionary < String , Decimal >> ICollection < KeyValuePair < String , IReadOnlyDictionary < String , Decimal >>> IReadOnlyDictionary < String , IReadOnlyDictionary < String , Decimal >> IReadOnlyCollection < KeyValuePair < String , IReadOnlyDictionary < String , Decimal >>> IEnumerable < KeyValuePair < String , IReadOnlyDictionary < String , Decimal >>> IDictionary ICollection IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.get_Item(System.String) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.set_Item(System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.ContainsKey(String) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.Add(System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.Remove(System.String) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.ICollection.CopyTo(Array, Int32) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.Add(Object, Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.Clear() ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.Contains(Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.GetEnumerator() ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.Remove(Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IEnumerable.GetEnumerator() ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.TryGetValue(String, IReadOnlyDictionary<String, Decimal>) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.Count ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.Dictionary ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.Item[String] ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.Item[System.String] System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.Values System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.Values ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.ICollection.IsSynchronized ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.ICollection.SyncRoot ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.IsFixedSize ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.IsReadOnly ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.Item[Object] ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.Keys ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.Values ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.Values Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class PriceMultiResponse : ReadOnlyDictionary<string, IReadOnlyDictionary<string, decimal>>, IDictionary<string, IReadOnlyDictionary<string, decimal>>, ICollection<KeyValuePair<string, IReadOnlyDictionary<string, decimal>>>, IReadOnlyDictionary<string, IReadOnlyDictionary<string, decimal>>, IReadOnlyCollection<KeyValuePair<string, IReadOnlyDictionary<string, decimal>>>, IEnumerable<KeyValuePair<string, IReadOnlyDictionary<string, decimal>>>, IDictionary, ICollection, IEnumerable Constructors PriceMultiResponse(IDictionary<String, IReadOnlyDictionary<String, Decimal>>) Declaration public PriceMultiResponse(IDictionary<string, IReadOnlyDictionary<string, decimal>> dictionary) Parameters Type Name Description IDictionary < String , IReadOnlyDictionary < String , Decimal >> dictionary Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/CryptoCompare.ExchangesClient.html": {
    "href": "api/CryptoCompare.ExchangesClient.html",
    "title": "Class ExchangesClient | CryptoCompare C# client",
    "keywords": "Class ExchangesClient The exchanges api client. Inheritance Object BaseApiClient ExchangesClient Implements IExchangesClient IApiClient Inherited Members BaseApiClient.GetAsync<TApiResponse>(Uri) BaseApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class ExchangesClient : BaseApiClient, IExchangesClient, IApiClient Constructors ExchangesClient(HttpClient) Initializes a new instance of the CryptoCompare.Clients.ExchangesClient class. Declaration public ExchangesClient(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The HTTP client. This cannot be null. Methods ListAsync() all the exchanges that CryptoCompare has integrated with. Declaration public Task<ExchangeListResponse> ListAsync() Returns Type Description Task < ExchangeListResponse > See Also CryptoCompare.Clients.ICoinsClient.AllExchangesAsync() Implements IExchangesClient IApiClient See Also CryptoCompare.Clients.BaseApiClient CryptoCompare.Clients.IExchangesClient"
  },
  "api/CryptoCompare.CoinGeneralInfo.html": {
    "href": "api/CryptoCompare.CoinGeneralInfo.html",
    "title": "Class CoinGeneralInfo | CryptoCompare C# client",
    "keywords": "Class CoinGeneralInfo Inheritance Object CoinGeneralInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CoinGeneralInfo Properties AffiliateUrl Declaration public string AffiliateUrl { get; set; } Property Value Type Description String Algorithm Declaration public string Algorithm { get; set; } Property Value Type Description String BaseAngularUrl Declaration public string BaseAngularUrl { get; set; } Property Value Type Description String BlockNumber Declaration public long? BlockNumber { get; set; } Property Value Type Description Nullable < Int64 > BlockReward Declaration public long? BlockReward { get; set; } Property Value Type Description Nullable < Int64 > BlockRewardReduction Declaration public string BlockRewardReduction { get; set; } Property Value Type Description String BlockTime Declaration public long? BlockTime { get; set; } Property Value Type Description Nullable < Int64 > DangerTop Declaration public string DangerTop { get; set; } Property Value Type Description String Description Declaration public string Description { get; set; } Property Value Type Description String DifficultyAdjustment Declaration public string DifficultyAdjustment { get; set; } Property Value Type Description String DocumentType Declaration public string DocumentType { get; set; } Property Value Type Description String Features Declaration public string Features { get; set; } Property Value Type Description String H1Text Declaration public string H1Text { get; set; } Property Value Type Description String Id Declaration public string Id { get; set; } Property Value Type Description String ImageUrl Declaration public string ImageUrl { get; set; } Property Value Type Description String InfoTop Declaration public string InfoTop { get; set; } Property Value Type Description String LastBlockExplorerUpdateTS Declaration [JsonConverter(typeof(UnixTimeConverter))] public DateTimeOffset? LastBlockExplorerUpdateTS { get; set; } Property Value Type Description Nullable < DateTimeOffset > Name Declaration public string Name { get; set; } Property Value Type Description String NetHashesPerSecond Declaration public double? NetHashesPerSecond { get; set; } Property Value Type Description Nullable < Double > PreviousTotalCoinsMined Declaration public double? PreviousTotalCoinsMined { get; set; } Property Value Type Description Nullable < Double > ProofType Declaration public string ProofType { get; set; } Property Value Type Description String StartDate Declaration [JsonConverter(typeof(IsoDateTimeWithFormatConverter), new object[]{\"dd/MM/yyyy\"})] public DateTime? StartDate { get; set; } Property Value Type Description Nullable < DateTime > Symbol Declaration public string Symbol { get; set; } Property Value Type Description String Technology Declaration public string Technology { get; set; } Property Value Type Description String TotalCoinsMined Declaration public double? TotalCoinsMined { get; set; } Property Value Type Description Nullable < Double > TotalCoinSupply Declaration public string TotalCoinSupply { get; set; } Property Value Type Description String Twitter Declaration public string Twitter { get; set; } Property Value Type Description String Url Declaration public string Url { get; set; } Property Value Type Description String WarningTop Declaration public string WarningTop { get; set; } Property Value Type Description String Website Declaration public string Website { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.ICO.html": {
    "href": "api/CryptoCompare.ICO.html",
    "title": "Class ICO | CryptoCompare C# client",
    "keywords": "Class ICO Inheritance Object ICO Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class ICO Properties Blog Declaration public string Blog { get; set; } Property Value Type Description String BlogLink Declaration public string BlogLink { get; set; } Property Value Type Description String Date Declaration [JsonConverter(typeof(UnixTimeConverter))] public DateTimeOffset Date { get; set; } Property Value Type Description DateTimeOffset Description Declaration public string Description { get; set; } Property Value Type Description String EndDate Declaration [JsonConverter(typeof(UnixTimeConverter))] public DateTimeOffset EndDate { get; set; } Property Value Type Description DateTimeOffset Features Declaration public string Features { get; set; } Property Value Type Description String FundingCap Declaration public string FundingCap { get; set; } Property Value Type Description String FundingTarget Declaration public string FundingTarget { get; set; } Property Value Type Description String FundsRaisedList Declaration public string FundsRaisedList { get; set; } Property Value Type Description String FundsRaisedUSD Declaration public string FundsRaisedUSD { get; set; } Property Value Type Description String ICOTokenSupply Declaration public string ICOTokenSupply { get; set; } Property Value Type Description String Jurisdiction Declaration public string Jurisdiction { get; set; } Property Value Type Description String LegalAdvisers Declaration public string LegalAdvisers { get; set; } Property Value Type Description String LegalForm Declaration public string LegalForm { get; set; } Property Value Type Description String PaymentMethod Declaration public string PaymentMethod { get; set; } Property Value Type Description String PublicPortfolioId Declaration public string PublicPortfolioId { get; set; } Property Value Type Description String PublicPortfolioUrl Declaration public string PublicPortfolioUrl { get; set; } Property Value Type Description String SecurityAuditCompany Declaration public string SecurityAuditCompany { get; set; } Property Value Type Description String StartPrice Declaration public string StartPrice { get; set; } Property Value Type Description String StartPriceCurrency Declaration public string StartPriceCurrency { get; set; } Property Value Type Description String Status Declaration public string Status { get; set; } Property Value Type Description String TokenPercentageForInvestors Declaration public string TokenPercentageForInvestors { get; set; } Property Value Type Description String TokenReserveSplit Declaration public string TokenReserveSplit { get; set; } Property Value Type Description String TokenSupplyPostICO Declaration public string TokenSupplyPostICO { get; set; } Property Value Type Description String TokenType Declaration public string TokenType { get; set; } Property Value Type Description String Website Declaration public string Website { get; set; } Property Value Type Description String WebsiteLink Declaration public string WebsiteLink { get; set; } Property Value Type Description String WhitePaper Declaration public string WhitePaper { get; set; } Property Value Type Description String WhitePaperLink Declaration public string WhitePaperLink { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.CoinSnapshotFullResponse.html": {
    "href": "api/CryptoCompare.CoinSnapshotFullResponse.html",
    "title": "Class CoinSnapshotFullResponse | CryptoCompare C# client",
    "keywords": "Class CoinSnapshotFullResponse Inheritance Object BaseApiResponse CoinSnapshotFullResponse Inherited Members BaseApiResponse.ErrorsSummary BaseApiResponse.IsSuccessfulResponse BaseApiResponse.Path BaseApiResponse.Status BaseApiResponse.StatusMessage BaseApiResponse.StatusType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CoinSnapshotFullResponse : BaseApiResponse Properties Data Declaration public CoinSnapshotFullData Data { get; set; } Property Value Type Description CoinSnapshotFullData"
  },
  "api/CryptoCompare.SimilarItem.html": {
    "href": "api/CryptoCompare.SimilarItem.html",
    "title": "Class SimilarItem | CryptoCompare C# client",
    "keywords": "Class SimilarItem Inheritance Object SimilarItem Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class SimilarItem Properties FollowingType Declaration [JsonProperty(\"FollowingType\")] public long FollowingType { get; set; } Property Value Type Description Int64 FullName Declaration [JsonProperty(\"FullName\")] public string FullName { get; set; } Property Value Type Description String Id Declaration [JsonProperty(\"Id\")] public long Id { get; set; } Property Value Type Description Int64 ImageUrl Declaration [JsonProperty(\"ImageUrl\")] public string ImageUrl { get; set; } Property Value Type Description String Name Declaration [JsonProperty(\"Name\")] public string Name { get; set; } Property Value Type Description String Url Declaration [JsonProperty(\"Url\")] public string Url { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.IMiningClient.html": {
    "href": "api/CryptoCompare.IMiningClient.html",
    "title": "Interface IMiningClient | CryptoCompare C# client",
    "keywords": "Interface IMiningClient Inherited Members IApiClient.GetAsync<TApiResponse>(Uri) IApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public interface IMiningClient : IApiClient Methods ContractsAsync() Returns all the mining contracts. Declaration Task<MiningContractsResponse> ContractsAsync() Returns Type Description Task < MiningContractsResponse > The asynchronous result that yields a MiningContractsResponse. EquipmentsAsync() Used to get all the mining equipment available on the website. Declaration Task<MiningEquipmentsResponse> EquipmentsAsync() Returns Type Description Task < MiningEquipmentsResponse > The asynchronous result that yields a MiningEquipmentsResponse."
  },
  "api/CryptoCompare.MarketCapRaw.html": {
    "href": "api/CryptoCompare.MarketCapRaw.html",
    "title": "Class MarketCapRaw | CryptoCompare C# client",
    "keywords": "Class MarketCapRaw Inheritance Object ReadOnlyDictionary < String , CoinFullAggregatedData > MarketCapRaw Implements IDictionary < String , CoinFullAggregatedData > ICollection < KeyValuePair < String , CoinFullAggregatedData >> IReadOnlyDictionary < String , CoinFullAggregatedData > IReadOnlyCollection < KeyValuePair < String , CoinFullAggregatedData >> IEnumerable < KeyValuePair < String , CoinFullAggregatedData >> IDictionary ICollection IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.get_Item(System.String) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.set_Item(System.String, CryptoCompare.CoinFullAggregatedData) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ReadOnlyDictionary<String, CoinFullAggregatedData>.ContainsKey(String) ReadOnlyDictionary<String, CoinFullAggregatedData>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>>.Add(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>>.Contains(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>>.Remove(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.Add(System.String, CryptoCompare.CoinFullAggregatedData) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.Remove(System.String) ReadOnlyDictionary<String, CoinFullAggregatedData>.ICollection.CopyTo(Array, Int32) ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.Add(Object, Object) ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.Clear() ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.Contains(Object) ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.GetEnumerator() ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.Remove(Object) ReadOnlyDictionary<String, CoinFullAggregatedData>.IEnumerable.GetEnumerator() ReadOnlyDictionary<String, CoinFullAggregatedData>.TryGetValue(String, CoinFullAggregatedData) ReadOnlyDictionary<String, CoinFullAggregatedData>.Count ReadOnlyDictionary<String, CoinFullAggregatedData>.Dictionary ReadOnlyDictionary<String, CoinFullAggregatedData>.Item[String] ReadOnlyDictionary<String, CoinFullAggregatedData>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.Item[System.String] System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.Values System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.Values ReadOnlyDictionary<String, CoinFullAggregatedData>.ICollection.IsSynchronized ReadOnlyDictionary<String, CoinFullAggregatedData>.ICollection.SyncRoot ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.IsFixedSize ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.IsReadOnly ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.Item[Object] ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.Keys ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.Values ReadOnlyDictionary<String, CoinFullAggregatedData>.Values Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class MarketCapRaw : ReadOnlyDictionary<string, CoinFullAggregatedData>, IDictionary<string, CoinFullAggregatedData>, ICollection<KeyValuePair<string, CoinFullAggregatedData>>, IReadOnlyDictionary<string, CoinFullAggregatedData>, IReadOnlyCollection<KeyValuePair<string, CoinFullAggregatedData>>, IEnumerable<KeyValuePair<string, CoinFullAggregatedData>>, IDictionary, ICollection, IEnumerable Constructors MarketCapRaw(IDictionary<String, CoinFullAggregatedData>) Declaration public MarketCapRaw(IDictionary<string, CoinFullAggregatedData> dictionary) Parameters Type Name Description IDictionary < String , CoinFullAggregatedData > dictionary Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/CryptoCompare.IPricesClient.html": {
    "href": "api/CryptoCompare.IPricesClient.html",
    "title": "Interface IPricesClient | CryptoCompare C# client",
    "keywords": "Interface IPricesClient Inherited Members IApiClient.GetAsync<TApiResponse>(Uri) IApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public interface IPricesClient : IApiClient Methods GenerateCustomAverageAsync(String, String, IEnumerable<String>, Nullable<Boolean>) Declaration Task<PriceAverageResponse> GenerateCustomAverageAsync(string fromSymbol, string toSymbol, IEnumerable<string> markets, bool? tryConversion = default(bool? )) Parameters Type Name Description String fromSymbol String toSymbol IEnumerable < String > markets Nullable < Boolean > tryConversion Returns Type Description Task < PriceAverageResponse > MultipleSymbolFullDataAsync(IEnumerable<String>, IEnumerable<String>, Nullable<Boolean>, String) Get all the current trading info (price, vol, open, high, low etc) of any list of cryptocurrencies in any other currency that you need. If the crypto does not trade directly into the toSymbol requested, BTC will be used for conversion. This API also returns Display values for all the fields. If the oposite pair trades we invert it (eg.: BTC-XMR). Declaration Task<PriceMultiFullResponse> MultipleSymbolFullDataAsync(IEnumerable<string> fromSymbols, IEnumerable<string> toSymbols, bool? tryConversion = default(bool? ), string exchangeName = null) Parameters Type Name Description IEnumerable < String > fromSymbols from symbols. IEnumerable < String > toSymbols to symbols. Nullable < Boolean > tryConversion (Optional) If set to false, it will try to get values without using any conversion at all (defaultVal:true) String exchangeName (Optional) Exchange name default => CCCAGG. Returns Type Description Task < PriceMultiFullResponse > MultipleSymbolsPriceAsync(IEnumerable<String>, IEnumerable<String>, Nullable<Boolean>, String) Same as single API path but with multiple from symbols. Declaration Task<PriceMultiResponse> MultipleSymbolsPriceAsync(IEnumerable<string> fromSymbols, IEnumerable<string> toSymbols, bool? tryConversion = default(bool? ), string exchangeName = null) Parameters Type Name Description IEnumerable < String > fromSymbols from symbols. IEnumerable < String > toSymbols to symbols. Nullable < Boolean > tryConversion (Optional) If set to false, it will try to get values without using any conversion at all (defaultVal:true) String exchangeName (Optional) Exchange name defult => CCCAGG. Returns Type Description Task < PriceMultiResponse > SingleSymbolPriceAsync(String, IEnumerable<String>, Nullable<Boolean>, String) Get the current price of any cryptocurrency in any other currency that you need. If the crypto does not trade directly into the toSymbol requested, BTC will be used for conversion. If the oposite pair trades we invert it (eg.: BTC-XMR). Declaration Task<PriceSingleResponse> SingleSymbolPriceAsync(string fromSymbol, IEnumerable<string> toSymbols, bool? tryConversion = default(bool? ), string exchangeName = null) Parameters Type Name Description String fromSymbol from symbol. IEnumerable < String > toSymbols to symbols. Nullable < Boolean > tryConversion If set to false, it will try to get values without using any conversion at all (defaultVal:true) String exchangeName Exchange name default => CCCAGG Returns Type Description Task < PriceSingleResponse >"
  },
  "api/CryptoCompare.ICryptoCompareClient.html": {
    "href": "api/CryptoCompare.ICryptoCompareClient.html",
    "title": "Interface ICryptoCompareClient | CryptoCompare C# client",
    "keywords": "Interface ICryptoCompareClient Interface for cryptocompare api client. Inherited Members IDisposable.Dispose() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public interface ICryptoCompareClient : IDisposable Properties Coins Gets the api client for coins related api endpoints. Declaration ICoinsClient Coins { get; } Property Value Type Description ICoinsClient Exchanges Gets the client for exchanges related api endpoints. Declaration IExchangesClient Exchanges { get; } Property Value Type Description IExchangesClient History Gets the api client for market history. Declaration IHistoryClient History { get; } Property Value Type Description IHistoryClient Mining Gets the api client for \"mining\" endpoints. Declaration IMiningClient Mining { get; } Property Value Type Description IMiningClient News Gets the api client for news endpoints. Declaration INewsClient News { get; } Property Value Type Description INewsClient Prices Gets the api client for cryptocurrency prices. Declaration IPricesClient Prices { get; } Property Value Type Description IPricesClient RateLimits Gets the api client for api calls rate limits. Declaration IRateLimitClient RateLimits { get; } Property Value Type Description IRateLimitClient SocialStats Gets the api client for \"social stats\" endpoints. Declaration ISocialStatsClient SocialStats { get; } Property Value Type Description ISocialStatsClient Subs Gets the api client for subs endpoints. Declaration ISubsClient Subs { get; } Property Value Type Description ISubsClient Tops Gets the api client for \"tops\" endpoints. Declaration ITopListClient Tops { get; } Property Value Type Description ITopListClient"
  },
  "api/CryptoCompare.ExchangeHistoryResponse.html": {
    "href": "api/CryptoCompare.ExchangeHistoryResponse.html",
    "title": "Class ExchangeHistoryResponse | CryptoCompare C# client",
    "keywords": "Class ExchangeHistoryResponse Inheritance Object BaseApiResponse ExchangeHistoryResponse Inherited Members BaseApiResponse.ErrorsSummary BaseApiResponse.IsSuccessfulResponse BaseApiResponse.Path BaseApiResponse.Status BaseApiResponse.StatusMessage BaseApiResponse.StatusType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class ExchangeHistoryResponse : BaseApiResponse Properties Data Declaration public IReadOnlyList<ExchangeHistoryData> Data { get; set; } Property Value Type Description IReadOnlyList < ExchangeHistoryData >"
  },
  "api/CryptoCompare.PriceMultiFullDisplay.html": {
    "href": "api/CryptoCompare.PriceMultiFullDisplay.html",
    "title": "Class PriceMultiFullDisplay | CryptoCompare C# client",
    "keywords": "Class PriceMultiFullDisplay Inheritance Object ReadOnlyDictionary < String , IReadOnlyDictionary < String , CoinFullAggregatedDataDisplay >> PriceMultiFullDisplay Implements IDictionary < String , IReadOnlyDictionary < String , CoinFullAggregatedDataDisplay >> ICollection < KeyValuePair < String , IReadOnlyDictionary < String , CoinFullAggregatedDataDisplay >>> IReadOnlyDictionary < String , IReadOnlyDictionary < String , CoinFullAggregatedDataDisplay >> IReadOnlyCollection < KeyValuePair < String , IReadOnlyDictionary < String , CoinFullAggregatedDataDisplay >>> IEnumerable < KeyValuePair < String , IReadOnlyDictionary < String , CoinFullAggregatedDataDisplay >>> IDictionary ICollection IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.get_Item(System.String) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.set_Item(System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.ContainsKey(String) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Add(System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Remove(System.String) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.ICollection.CopyTo(Array, Int32) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.IDictionary.Add(Object, Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.IDictionary.Clear() ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.IDictionary.Contains(Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.IDictionary.GetEnumerator() ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.IDictionary.Remove(Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.IEnumerable.GetEnumerator() ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.TryGetValue(String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.Count ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.Dictionary ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.Item[String] ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Item[System.String] System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Values System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Values ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.ICollection.IsSynchronized ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.ICollection.SyncRoot ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.IDictionary.IsFixedSize ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.IDictionary.IsReadOnly ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.IDictionary.Item[Object] ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.IDictionary.Keys ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.IDictionary.Values ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>.Values Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class PriceMultiFullDisplay : ReadOnlyDictionary<string, IReadOnlyDictionary<string, CoinFullAggregatedDataDisplay>>, IDictionary<string, IReadOnlyDictionary<string, CoinFullAggregatedDataDisplay>>, ICollection<KeyValuePair<string, IReadOnlyDictionary<string, CoinFullAggregatedDataDisplay>>>, IReadOnlyDictionary<string, IReadOnlyDictionary<string, CoinFullAggregatedDataDisplay>>, IReadOnlyCollection<KeyValuePair<string, IReadOnlyDictionary<string, CoinFullAggregatedDataDisplay>>>, IEnumerable<KeyValuePair<string, IReadOnlyDictionary<string, CoinFullAggregatedDataDisplay>>>, IDictionary, ICollection, IEnumerable Constructors PriceMultiFullDisplay(IDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>>) Declaration public PriceMultiFullDisplay(IDictionary<string, IReadOnlyDictionary<string, CoinFullAggregatedDataDisplay>> dictionary) Parameters Type Name Description IDictionary < String , IReadOnlyDictionary < String , CoinFullAggregatedDataDisplay >> dictionary Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/CryptoCompare.ISubsClient.html": {
    "href": "api/CryptoCompare.ISubsClient.html",
    "title": "Interface ISubsClient | CryptoCompare C# client",
    "keywords": "Interface ISubsClient Inherited Members IApiClient.GetAsync<TApiResponse>(Uri) IApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public interface ISubsClient : IApiClient Methods ListAsync(String, IEnumerable<String>) Get all the available streamer subscription channels for the requested pairs. Declaration Task<SubListResponse> ListAsync(string fromSymbol, IEnumerable<string> toSymbols) Parameters Type Name Description String fromSymbol from symbol. IEnumerable < String > toSymbols to symbols. Returns Type Description Task < SubListResponse > An asynchronous result that yields the list of subs."
  },
  "api/CryptoCompare.SubId.html": {
    "href": "api/CryptoCompare.SubId.html",
    "title": "Enum SubId | CryptoCompare C# client",
    "keywords": "Enum SubId Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public enum SubId Fields Name Description Current Latest quote update of a currency pair from a specific exchange. CurrentAgg Quote update aggregated over the last 24 hours of a currency pair from a specific exchange. Trade Trade level data on a currency pair from a specific exchange."
  },
  "api/CryptoCompare.Sub.html": {
    "href": "api/CryptoCompare.Sub.html",
    "title": "Struct Sub | CryptoCompare C# client",
    "keywords": "Struct Sub Implements IEquatable < Sub > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public struct Sub : IEquatable<Sub> Constructors Sub(String, String, SubId, String) Declaration public Sub(string exchange, string fromSymbol, SubId subId, string toSymbol) Parameters Type Name Description String exchange String fromSymbol SubId subId String toSymbol Properties Exchange Declaration public string Exchange { get; } Property Value Type Description String FromSymbol Declaration public string FromSymbol { get; } Property Value Type Description String SubId Declaration public SubId SubId { get; } Property Value Type Description SubId ToSymbol Declaration public string ToSymbol { get; } Property Value Type Description String Methods Equals(Sub) Declaration public bool Equals(Sub other) Parameters Type Name Description Sub other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Implements System.IEquatable<T>"
  },
  "api/CryptoCompare.Repository.html": {
    "href": "api/CryptoCompare.Repository.html",
    "title": "Class Repository | CryptoCompare C# client",
    "keywords": "Class Repository Inheritance Object Repository Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class Repository Properties ClosedIssues Declaration [JsonProperty(\"closed_issues\")] public string ClosedIssues { get; set; } Property Value Type Description String ClosedPullIssues Declaration [JsonProperty(\"closed_pull_issues\")] public string ClosedPullIssues { get; set; } Property Value Type Description String ClosedTotalIssues Declaration [JsonProperty(\"closed_total_issues\")] public string ClosedTotalIssues { get; set; } Property Value Type Description String CreatedAt Declaration [JsonProperty(\"created_at\")] public string CreatedAt { get; set; } Property Value Type Description String Fork Declaration [JsonProperty(\"fork\")] public string Fork { get; set; } Property Value Type Description String Forks Declaration [JsonProperty(\"forks\")] public long Forks { get; set; } Property Value Type Description Int64 Language Declaration [JsonProperty(\"language\")] public string Language { get; set; } Property Value Type Description String LastPush Declaration [JsonProperty(\"last_push\")] public string LastPush { get; set; } Property Value Type Description String LastUpdate Declaration [JsonProperty(\"last_update\")] public string LastUpdate { get; set; } Property Value Type Description String OpenIssues Declaration [JsonProperty(\"open_issues\")] public string OpenIssues { get; set; } Property Value Type Description String OpenPullIssues Declaration [JsonProperty(\"open_pull_issues\")] public string OpenPullIssues { get; set; } Property Value Type Description String OpenTotalIssues Declaration [JsonProperty(\"open_total_issues\")] public string OpenTotalIssues { get; set; } Property Value Type Description String Parent Declaration [JsonProperty(\"parent\")] public Parent Parent { get; set; } Property Value Type Description Parent Size Declaration [JsonProperty(\"size\")] public string Size { get; set; } Property Value Type Description String Source Declaration [JsonProperty(\"source\")] public Parent Source { get; set; } Property Value Type Description Parent Stars Declaration [JsonProperty(\"stars\")] public long Stars { get; set; } Property Value Type Description Int64 Subscribers Declaration [JsonProperty(\"subscribers\")] public long Subscribers { get; set; } Property Value Type Description Int64 Url Declaration [JsonProperty(\"url\")] public string Url { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.Reddit.html": {
    "href": "api/CryptoCompare.Reddit.html",
    "title": "Class Reddit | CryptoCompare C# client",
    "keywords": "Class Reddit Inheritance Object Reddit Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class Reddit Properties ActiveUsers Declaration [JsonProperty(\"active_users\")] public long ActiveUsers { get; set; } Property Value Type Description Int64 CommentsPerDay Declaration [JsonProperty(\"comments_per_day\")] public long CommentsPerDay { get; set; } Property Value Type Description Int64 CommentsPerHour Declaration [JsonProperty(\"comments_per_hour\")] public string CommentsPerHour { get; set; } Property Value Type Description String CommunityCreation Declaration [JsonProperty(\"community_creation\")] public string CommunityCreation { get; set; } Property Value Type Description String Link Declaration [JsonProperty(\"link\")] public string Link { get; set; } Property Value Type Description String Name Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description String Points Declaration [JsonProperty(\"Points\")] public long Points { get; set; } Property Value Type Description Int64 PostsPerDay Declaration [JsonProperty(\"posts_per_day\")] public string PostsPerDay { get; set; } Property Value Type Description String PostsPerHour Declaration [JsonProperty(\"posts_per_hour\")] public string PostsPerHour { get; set; } Property Value Type Description String Subscribers Declaration [JsonProperty(\"subscribers\")] public long Subscribers { get; set; } Property Value Type Description Int64"
  },
  "api/CryptoCompare.CoinInfo.html": {
    "href": "api/CryptoCompare.CoinInfo.html",
    "title": "Class CoinInfo | CryptoCompare C# client",
    "keywords": "Class CoinInfo Information about the coin. (Coin list endpoint) Inheritance Object CoinInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CoinInfo Properties Algorithm Gets or sets the algorithm of the coin. Declaration public string Algorithm { get; set; } Property Value Type Description String CoinName Gets or sets the name of the coin. Declaration public string CoinName { get; set; } Property Value Type Description String FullName Gets or sets the full name of the coins. Declaration public string FullName { get; set; } Property Value Type Description String FullyPremined Gets or sets the number of fully premined coins. Declaration public string FullyPremined { get; set; } Property Value Type Description String The fully premined. Id Gets or sets the internal id, this is used in other calls. Declaration public string Id { get; set; } Property Value Type Description String ImageUrl Gets or sets he logo image of the coin. Declaration public string ImageUrl { get; set; } Property Value Type Description String Name Gets or sets the coin name. Declaration public string Name { get; set; } Property Value Type Description String PreMinedValue Gets or sets the pre-mined value. Declaration public string PreMinedValue { get; set; } Property Value Type Description String ProofType Gets or sets the proof type. Declaration public string ProofType { get; set; } Property Value Type Description String SortOrder Gets the sort order. Declaration public int SortOrder { get; set; } Property Value Type Description Int32 Sponsored Gets or sets a value indicating whether the coin is sponsored. Declaration public bool Sponsored { get; set; } Property Value Type Description Boolean Symbol Gets or sets the symbol. Declaration public string Symbol { get; set; } Property Value Type Description String TotalCoinsFreeFloat Gets or sets the total number of freed coins. Declaration public string TotalCoinsFreeFloat { get; set; } Property Value Type Description String TotalCoinSupply Gets or sets the total number of supplied coins. Declaration public string TotalCoinSupply { get; set; } Property Value Type Description String Url Gets or sets the url of the coin on cryptocompare. Declaration public string Url { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.PriceHistoricalReponse.html": {
    "href": "api/CryptoCompare.PriceHistoricalReponse.html",
    "title": "Class PriceHistoricalReponse | CryptoCompare C# client",
    "keywords": "Class PriceHistoricalReponse Inheritance Object ReadOnlyDictionary < String , IReadOnlyDictionary < String , Decimal >> PriceHistoricalReponse Implements IDictionary < String , IReadOnlyDictionary < String , Decimal >> ICollection < KeyValuePair < String , IReadOnlyDictionary < String , Decimal >>> IReadOnlyDictionary < String , IReadOnlyDictionary < String , Decimal >> IReadOnlyCollection < KeyValuePair < String , IReadOnlyDictionary < String , Decimal >>> IEnumerable < KeyValuePair < String , IReadOnlyDictionary < String , Decimal >>> IDictionary ICollection IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.get_Item(System.String) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.set_Item(System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.ContainsKey(String) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.Add(System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.Remove(System.String) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.ICollection.CopyTo(Array, Int32) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.Add(Object, Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.Clear() ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.Contains(Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.GetEnumerator() ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.Remove(Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IEnumerable.GetEnumerator() ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.TryGetValue(String, IReadOnlyDictionary<String, Decimal>) ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.Count ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.Dictionary ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.Item[String] ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.Item[System.String] System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.Values System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>>.Values ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.ICollection.IsSynchronized ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.ICollection.SyncRoot ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.IsFixedSize ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.IsReadOnly ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.Item[Object] ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.Keys ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.IDictionary.Values ReadOnlyDictionary<String, IReadOnlyDictionary<String, Decimal>>.Values Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class PriceHistoricalReponse : ReadOnlyDictionary<string, IReadOnlyDictionary<string, decimal>>, IDictionary<string, IReadOnlyDictionary<string, decimal>>, ICollection<KeyValuePair<string, IReadOnlyDictionary<string, decimal>>>, IReadOnlyDictionary<string, IReadOnlyDictionary<string, decimal>>, IReadOnlyCollection<KeyValuePair<string, IReadOnlyDictionary<string, decimal>>>, IEnumerable<KeyValuePair<string, IReadOnlyDictionary<string, decimal>>>, IDictionary, ICollection, IEnumerable Constructors PriceHistoricalReponse(IDictionary<String, IReadOnlyDictionary<String, Decimal>>) Declaration public PriceHistoricalReponse(IDictionary<string, IReadOnlyDictionary<string, decimal>> dictionary) Parameters Type Name Description IDictionary < String , IReadOnlyDictionary < String , Decimal >> dictionary Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/CryptoCompare.HistoryResponse.html": {
    "href": "api/CryptoCompare.HistoryResponse.html",
    "title": "Class HistoryResponse | CryptoCompare C# client",
    "keywords": "Class HistoryResponse Inheritance Object BaseApiResponse HistoryResponse Inherited Members BaseApiResponse.ErrorsSummary BaseApiResponse.IsSuccessfulResponse BaseApiResponse.Path BaseApiResponse.Status BaseApiResponse.StatusMessage BaseApiResponse.StatusType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class HistoryResponse : BaseApiResponse Properties Data Declaration public IReadOnlyList<CandleData> Data { get; set; } Property Value Type Description IReadOnlyList < CandleData >"
  },
  "api/CryptoCompare.html": {
    "href": "api/CryptoCompare.html",
    "title": "Namespace CryptoCompare | CryptoCompare C# client",
    "keywords": "Namespace CryptoCompare Classes AggregatedData BaseApiClient A base API client. BaseApiResponse A base API response. CryptoCompare don't use status code for errors. They use a status reported into \"Response\" property Calls Api calls. CandleData CodeRepository CoinAggregatedData CoinFullAggregatedData CoinFullAggregatedDataDisplay CoinGeneralInfo CoinInfo Information about the coin. (Coin list endpoint) CoinListResponse List of coins. CoinsClient The coins client. Gets general info for all the coins available on the website. CoinSnapshotData CoinSnapshotFullData CoinSnapshotFullResponse CoinSnapshotResponse CryptoCompare CryptoCompareClient CryptoCompare api client. CryptoCompareException Global Exception for signalling cryptocompare api errors. CryptopianFollower DateTimeExtensions ExchangeHistoryData ExchangeHistoryResponse ExchangeListResponse ExchangesClient The exchanges api client. Facebook General HistoryClient HistoryDayAverageResponse A history day average response. TODO: replace ReadOnlyDictionary<string, object> by ReadOnlyDictionary<string, decimal> HistoryResponse ICO IsoDateTimeWithFormatConverter MarketCapDisplay MarketCapRaw MiningClient MiningContract MiningContractsResponse MiningData MiningEquipment MiningEquipmentsResponse NewsClient NewsEntity NewsProvider PageViewsSplit Parent PriceAverageResponse PriceClient PriceHistoricalReponse PriceMultiFullDisplay PriceMultiFullRaw PriceMultiFullResponse PriceMultiResponse PriceSingleResponse RateLimitClient Api client for cryptocompare api calls rate limits. RateLimitResponse A rate limit. Reddit Repository SEO SimilarItem SocialStats SocialStatsClient SocialStatsResponse SubList SubListResponse SubsClient TopExchangeFullResponse TopExchangeInfo TopInfo TopListClient Client for \"tops\" endpoints (Exchanges, volumes, pairs). TopMarketCapInfo TopMarketCapResponse TopResponse TopVolume24HInfo TopVolume24HResponse TopVolumeInfo TopVolumesResponse Twitter Volume24HDisplay Volume24HRaw Structs Sub Interfaces IApiClient ICoinsClient Coins api client. Gets general info for all the coins available on the website. ICryptoCompareClient Interface for cryptocompare api client. IExchangesClient Interface for exchanges api client. IHistoryClient IMiningClient INewsClient IPricesClient IRateLimitClient Interface of api client for cryptocompare api calls rate limits. ISocialStatsClient ISubsClient ITopListClient Enums CalculationType SubId"
  },
  "api/CryptoCompare.CryptoCompareClient.html": {
    "href": "api/CryptoCompare.CryptoCompareClient.html",
    "title": "Class CryptoCompareClient | CryptoCompare C# client",
    "keywords": "Class CryptoCompareClient CryptoCompare api client. Inheritance Object CryptoCompareClient Implements ICryptoCompareClient IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CryptoCompareClient : ICryptoCompareClient, IDisposable Constructors CryptoCompareClient(HttpClientHandler, String) Initializes a new instance of the CryptoCompare.CryptoCompareClient class. Declaration public CryptoCompareClient(HttpClientHandler httpClientHandler, string apiKey = null) Parameters Type Name Description HttpClientHandler httpClientHandler Custom HTTP client handler. Can be used to define proxy settigs String apiKey The api key from cryptocompare CryptoCompareClient(String) Initializes a new instance of the CryptoCompare.CryptoCompareClient class. Declaration public CryptoCompareClient(string apiKey = null) Parameters Type Name Description String apiKey Properties Coins Gets the client for coins related api endpoints. Declaration public ICoinsClient Coins { get; } Property Value Type Description ICoinsClient See Also Coins Exchanges Gets the client for exchanges related api endpoints. Declaration public IExchangesClient Exchanges { get; } Property Value Type Description IExchangesClient See Also Exchanges History Gets the api client for market history. Declaration public IHistoryClient History { get; } Property Value Type Description IHistoryClient See Also History Instance Gets a Singleton instance of CryptoCompare api client. Declaration public static CryptoCompareClient Instance { get; } Property Value Type Description CryptoCompareClient The instance. Mining Gets the api client for \"mining\" endpoints. Declaration public IMiningClient Mining { get; } Property Value Type Description IMiningClient The mining client. See Also CryptoCompare.ICryptoCompareClient.MiningClient News Gets the api client for news endpoints. Declaration public INewsClient News { get; } Property Value Type Description INewsClient See Also News Prices Gets the api client for cryptocurrency prices. Declaration public IPricesClient Prices { get; } Property Value Type Description IPricesClient See Also Prices RateLimits Gets or sets the client for api calls rate limits. Declaration public IRateLimitClient RateLimits { get; } Property Value Type Description IRateLimitClient See Also RateLimits SocialStats Gets the api client for \"social\" endpoints. Declaration public ISocialStatsClient SocialStats { get; } Property Value Type Description ISocialStatsClient See Also CryptoCompare.ICryptoCompareClient.Social Subs The subs. Declaration public ISubsClient Subs { get; } Property Value Type Description ISubsClient Tops Gets the api client for \"tops\" endpoints. Declaration public ITopListClient Tops { get; } Property Value Type Description ITopListClient See Also Tops Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() See Also System.IDisposable.Dispose() SetApiKey(String) Declaration public void SetApiKey(string apiKey) Parameters Type Name Description String apiKey Implements ICryptoCompareClient System.IDisposable See Also ICryptoCompareClient"
  },
  "api/CryptoCompare.CoinSnapshotData.html": {
    "href": "api/CryptoCompare.CoinSnapshotData.html",
    "title": "Class CoinSnapshotData | CryptoCompare C# client",
    "keywords": "Class CoinSnapshotData Inheritance Object CoinSnapshotData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CoinSnapshotData Properties AggregatedData Declaration public CoinAggregatedData AggregatedData { get; set; } Property Value Type Description CoinAggregatedData Algorithm Declaration public string Algorithm { get; set; } Property Value Type Description String BlockNumber Declaration public long? BlockNumber { get; set; } Property Value Type Description Nullable < Int64 > BlockReward Declaration public double? BlockReward { get; set; } Property Value Type Description Nullable < Double > Exchanges Declaration public IReadOnlyList<AggregatedData> Exchanges { get; set; } Property Value Type Description IReadOnlyList < AggregatedData > NetHashesPerSecond Declaration public double? NetHashesPerSecond { get; set; } Property Value Type Description Nullable < Double > ProofType Declaration public string ProofType { get; set; } Property Value Type Description String TotalCoinsMined Declaration public long TotalCoinsMined { get; set; } Property Value Type Description Int64"
  },
  "api/CryptoCompare.AggregatedData.html": {
    "href": "api/CryptoCompare.AggregatedData.html",
    "title": "Class AggregatedData | CryptoCompare C# client",
    "keywords": "Class AggregatedData Inheritance Object AggregatedData CoinAggregatedData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class AggregatedData Properties Flags Declaration [JsonProperty(\"FLAGS\")] public string Flags { get; set; } Property Value Type Description String FromSymbol Declaration [JsonProperty(\"FROMSYMBOL\")] public string FromSymbol { get; set; } Property Value Type Description String High24Hour Declaration [JsonProperty(\"HIGH24HOUR\")] public double? High24Hour { get; set; } Property Value Type Description Nullable < Double > LastTradeId Declaration [JsonProperty(\"LASTTRADEID\")] public string LastTradeId { get; set; } Property Value Type Description String LastUpdate Declaration [JsonConverter(typeof(UnixTimeConverter))] [JsonProperty(\"LASTUPDATE\")] public DateTimeOffset LastUpdate { get; set; } Property Value Type Description DateTimeOffset LastVolume Declaration [JsonProperty(\"LASTVOLUME\")] public double? LastVolume { get; set; } Property Value Type Description Nullable < Double > LastVolumeTo Declaration [JsonProperty(\"LASTVOLUMETO\")] public double? LastVolumeTo { get; set; } Property Value Type Description Nullable < Double > Low24Hour Declaration [JsonProperty(\"LOW24HOUR\")] public double? Low24Hour { get; set; } Property Value Type Description Nullable < Double > Market Declaration [JsonProperty(\"MARKET\")] public string Market { get; set; } Property Value Type Description String Open24Hour Declaration [JsonProperty(\"OPEN24HOUR\")] public double? Open24Hour { get; set; } Property Value Type Description Nullable < Double > Price Declaration [JsonProperty(\"PRICE\")] public double? Price { get; set; } Property Value Type Description Nullable < Double > ToSymbol Declaration [JsonProperty(\"TOSYMBOL\")] public string ToSymbol { get; set; } Property Value Type Description String Type Declaration [JsonProperty(\"TYPE\")] public string Type { get; set; } Property Value Type Description String Volume24Hour Declaration [JsonProperty(\"VOLUME24HOUR\")] public double? Volume24Hour { get; set; } Property Value Type Description Nullable < Double > Volume24HourTo Declaration [JsonProperty(\"VOLUME24HOURTO\")] public double? Volume24HourTo { get; set; } Property Value Type Description Nullable < Double >"
  },
  "api/CryptoCompare.SubsClient.html": {
    "href": "api/CryptoCompare.SubsClient.html",
    "title": "Class SubsClient | CryptoCompare C# client",
    "keywords": "Class SubsClient Inheritance Object BaseApiClient SubsClient Implements ISubsClient IApiClient Inherited Members BaseApiClient.GetAsync<TApiResponse>(Uri) BaseApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class SubsClient : BaseApiClient, ISubsClient, IApiClient Constructors SubsClient(HttpClient) Initializes a new instance of the CryptoCompare.SubsClient class. Declaration public SubsClient(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The HTTP client. This cannot be null. Methods ListAsync(String, IEnumerable<String>) Get all the available streamer subscription channels for the requested pairs. Declaration public Task<SubListResponse> ListAsync(string fromSymbol, IEnumerable<string> toSymbols) Parameters Type Name Description String fromSymbol from symbol. IEnumerable < String > toSymbols to symbols. Returns Type Description Task < SubListResponse > An asynchronous result that yields the list of subs. See Also CryptoCompare.ISubsClient.ListAsync(string,IEnumerable{string}) Implements ISubsClient IApiClient"
  },
  "api/CryptoCompare.CoinSnapshotFullData.html": {
    "href": "api/CryptoCompare.CoinSnapshotFullData.html",
    "title": "Class CoinSnapshotFullData | CryptoCompare C# client",
    "keywords": "Class CoinSnapshotFullData Inheritance Object CoinSnapshotFullData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CoinSnapshotFullData Properties General Declaration public CoinGeneralInfo General { get; set; } Property Value Type Description CoinGeneralInfo ICO Declaration public ICO ICO { get; set; } Property Value Type Description ICO SEO Declaration public SEO SEO { get; set; } Property Value Type Description SEO StreamerDataRaw Declaration public IReadOnlyList<string> StreamerDataRaw { get; set; } Property Value Type Description IReadOnlyList < String > Subs Declaration [JsonConverter(typeof(StringToSubConverter))] public IReadOnlyList<Sub> Subs { get; set; } Property Value Type Description IReadOnlyList < Sub >"
  },
  "api/CryptoCompare.Volume24HRaw.html": {
    "href": "api/CryptoCompare.Volume24HRaw.html",
    "title": "Class Volume24HRaw | CryptoCompare C# client",
    "keywords": "Class Volume24HRaw Inheritance Object ReadOnlyDictionary < String , CoinFullAggregatedData > Volume24HRaw Implements IDictionary < String , CoinFullAggregatedData > ICollection < KeyValuePair < String , CoinFullAggregatedData >> IReadOnlyDictionary < String , CoinFullAggregatedData > IReadOnlyCollection < KeyValuePair < String , CoinFullAggregatedData >> IEnumerable < KeyValuePair < String , CoinFullAggregatedData >> IDictionary ICollection IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.get_Item(System.String) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.set_Item(System.String, CryptoCompare.CoinFullAggregatedData) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ReadOnlyDictionary<String, CoinFullAggregatedData>.ContainsKey(String) ReadOnlyDictionary<String, CoinFullAggregatedData>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>>.Add(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>>.Contains(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>>.Remove(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.Add(System.String, CryptoCompare.CoinFullAggregatedData) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.Remove(System.String) ReadOnlyDictionary<String, CoinFullAggregatedData>.ICollection.CopyTo(Array, Int32) ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.Add(Object, Object) ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.Clear() ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.Contains(Object) ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.GetEnumerator() ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.Remove(Object) ReadOnlyDictionary<String, CoinFullAggregatedData>.IEnumerable.GetEnumerator() ReadOnlyDictionary<String, CoinFullAggregatedData>.TryGetValue(String, CoinFullAggregatedData) ReadOnlyDictionary<String, CoinFullAggregatedData>.Count ReadOnlyDictionary<String, CoinFullAggregatedData>.Dictionary ReadOnlyDictionary<String, CoinFullAggregatedData>.Item[String] ReadOnlyDictionary<String, CoinFullAggregatedData>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedData>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.Item[System.String] System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.Values System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>.Values ReadOnlyDictionary<String, CoinFullAggregatedData>.ICollection.IsSynchronized ReadOnlyDictionary<String, CoinFullAggregatedData>.ICollection.SyncRoot ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.IsFixedSize ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.IsReadOnly ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.Item[Object] ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.Keys ReadOnlyDictionary<String, CoinFullAggregatedData>.IDictionary.Values ReadOnlyDictionary<String, CoinFullAggregatedData>.Values Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class Volume24HRaw : ReadOnlyDictionary<string, CoinFullAggregatedData>, IDictionary<string, CoinFullAggregatedData>, ICollection<KeyValuePair<string, CoinFullAggregatedData>>, IReadOnlyDictionary<string, CoinFullAggregatedData>, IReadOnlyCollection<KeyValuePair<string, CoinFullAggregatedData>>, IEnumerable<KeyValuePair<string, CoinFullAggregatedData>>, IDictionary, ICollection, IEnumerable Constructors Volume24HRaw(IDictionary<String, CoinFullAggregatedData>) Declaration public Volume24HRaw(IDictionary<string, CoinFullAggregatedData> dictionary) Parameters Type Name Description IDictionary < String , CoinFullAggregatedData > dictionary Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/CryptoCompare.Facebook.html": {
    "href": "api/CryptoCompare.Facebook.html",
    "title": "Class Facebook | CryptoCompare C# client",
    "keywords": "Class Facebook Inheritance Object Facebook Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class Facebook Properties IsClosed Declaration [JsonProperty(\"is_closed\")] public string IsClosed { get; set; } Property Value Type Description String Likes Declaration [JsonProperty(\"likes\")] public long Likes { get; set; } Property Value Type Description Int64 Link Declaration [JsonProperty(\"link\")] public string Link { get; set; } Property Value Type Description String Name Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description String Points Declaration [JsonProperty(\"Points\")] public long Points { get; set; } Property Value Type Description Int64 TalkingAbout Declaration [JsonProperty(\"talking_about\")] public string TalkingAbout { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.DateTimeExtensions.html": {
    "href": "api/CryptoCompare.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | CryptoCompare C# client",
    "keywords": "Class DateTimeExtensions Inheritance Object DateTimeExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public static class DateTimeExtensions Methods FromUnixTime(Int64) Convert a Unix tick to a DateTimeOffset with UTC offset Declaration public static DateTimeOffset FromUnixTime(this long unixTime) Parameters Type Name Description Int64 unixTime UTC tick Returns Type Description DateTimeOffset ToUnixTime(DateTimeOffset) Convert DateTimeOffset with UTC offset to a Unix tick Declaration public static long ToUnixTime(this DateTimeOffset date) Parameters Type Name Description DateTimeOffset date Date Time with UTC offset Returns Type Description Int64"
  },
  "api/CryptoCompare.TopVolumeInfo.html": {
    "href": "api/CryptoCompare.TopVolumeInfo.html",
    "title": "Class TopVolumeInfo | CryptoCompare C# client",
    "keywords": "Class TopVolumeInfo Inheritance Object TopVolumeInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class TopVolumeInfo Properties Fullname Declaration public string Fullname { get; set; } Property Value Type Description String Id Declaration public string Id { get; set; } Property Value Type Description String Name Declaration public string Name { get; set; } Property Value Type Description String Supply Declaration public decimal Supply { get; set; } Property Value Type Description Decimal Symbol Declaration public string Symbol { get; set; } Property Value Type Description String Volume24HourTo Declaration public decimal Volume24HourTo { get; set; } Property Value Type Description Decimal"
  },
  "api/CryptoCompare.SubListResponse.html": {
    "href": "api/CryptoCompare.SubListResponse.html",
    "title": "Class SubListResponse | CryptoCompare C# client",
    "keywords": "Class SubListResponse Inheritance Object ReadOnlyDictionary < String , SubList > SubListResponse Implements IDictionary < String , SubList > ICollection < KeyValuePair < String , SubList >> IReadOnlyDictionary < String , SubList > IReadOnlyCollection < KeyValuePair < String , SubList >> IEnumerable < KeyValuePair < String , SubList >> IDictionary ICollection IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.SubList>.get_Item(System.String) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.SubList>.set_Item(System.String, CryptoCompare.SubList) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ReadOnlyDictionary<String, SubList>.ContainsKey(String) ReadOnlyDictionary<String, SubList>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.SubList>>.Add(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.SubList>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.SubList>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.SubList>>.Contains(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.SubList>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.SubList>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.SubList>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.SubList>>.Remove(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.SubList>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.SubList>.Add(System.String, CryptoCompare.SubList) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.SubList>.Remove(System.String) ReadOnlyDictionary<String, SubList>.ICollection.CopyTo(Array, Int32) ReadOnlyDictionary<String, SubList>.IDictionary.Add(Object, Object) ReadOnlyDictionary<String, SubList>.IDictionary.Clear() ReadOnlyDictionary<String, SubList>.IDictionary.Contains(Object) ReadOnlyDictionary<String, SubList>.IDictionary.GetEnumerator() ReadOnlyDictionary<String, SubList>.IDictionary.Remove(Object) ReadOnlyDictionary<String, SubList>.IEnumerable.GetEnumerator() ReadOnlyDictionary<String, SubList>.TryGetValue(String, SubList) ReadOnlyDictionary<String, SubList>.Count ReadOnlyDictionary<String, SubList>.Dictionary ReadOnlyDictionary<String, SubList>.Item[String] ReadOnlyDictionary<String, SubList>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.SubList>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.SubList>.Item[System.String] System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.SubList>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.SubList>.Values System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.SubList>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.SubList>.System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.SubList>.Values ReadOnlyDictionary<String, SubList>.ICollection.IsSynchronized ReadOnlyDictionary<String, SubList>.ICollection.SyncRoot ReadOnlyDictionary<String, SubList>.IDictionary.IsFixedSize ReadOnlyDictionary<String, SubList>.IDictionary.IsReadOnly ReadOnlyDictionary<String, SubList>.IDictionary.Item[Object] ReadOnlyDictionary<String, SubList>.IDictionary.Keys ReadOnlyDictionary<String, SubList>.IDictionary.Values ReadOnlyDictionary<String, SubList>.Values Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class SubListResponse : ReadOnlyDictionary<string, SubList>, IDictionary<string, SubList>, ICollection<KeyValuePair<string, SubList>>, IReadOnlyDictionary<string, SubList>, IReadOnlyCollection<KeyValuePair<string, SubList>>, IEnumerable<KeyValuePair<string, SubList>>, IDictionary, ICollection, IEnumerable Constructors SubListResponse(IDictionary<String, SubList>) Declaration public SubListResponse(IDictionary<string, SubList> dictionary) Parameters Type Name Description IDictionary < String , SubList > dictionary Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/CryptoCompare.Volume24HDisplay.html": {
    "href": "api/CryptoCompare.Volume24HDisplay.html",
    "title": "Class Volume24HDisplay | CryptoCompare C# client",
    "keywords": "Class Volume24HDisplay Inheritance Object ReadOnlyDictionary < String , CoinFullAggregatedDataDisplay > Volume24HDisplay Implements IDictionary < String , CoinFullAggregatedDataDisplay > ICollection < KeyValuePair < String , CoinFullAggregatedDataDisplay >> IReadOnlyDictionary < String , CoinFullAggregatedDataDisplay > IReadOnlyCollection < KeyValuePair < String , CoinFullAggregatedDataDisplay >> IEnumerable < KeyValuePair < String , CoinFullAggregatedDataDisplay >> IDictionary ICollection IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.get_Item(System.String) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.set_Item(System.String, CryptoCompare.CoinFullAggregatedDataDisplay) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.ContainsKey(String) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Add(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Contains(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Remove(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.Add(System.String, CryptoCompare.CoinFullAggregatedDataDisplay) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.Remove(System.String) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.ICollection.CopyTo(Array, Int32) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.Add(Object, Object) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.Clear() ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.Contains(Object) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.GetEnumerator() ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.Remove(Object) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IEnumerable.GetEnumerator() ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.TryGetValue(String, CoinFullAggregatedDataDisplay) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.Count ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.Dictionary ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.Item[String] ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.Item[System.String] System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.Values System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.Values ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.ICollection.IsSynchronized ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.ICollection.SyncRoot ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.IsFixedSize ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.IsReadOnly ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.Item[Object] ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.Keys ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.Values ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.Values Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class Volume24HDisplay : ReadOnlyDictionary<string, CoinFullAggregatedDataDisplay>, IDictionary<string, CoinFullAggregatedDataDisplay>, ICollection<KeyValuePair<string, CoinFullAggregatedDataDisplay>>, IReadOnlyDictionary<string, CoinFullAggregatedDataDisplay>, IReadOnlyCollection<KeyValuePair<string, CoinFullAggregatedDataDisplay>>, IEnumerable<KeyValuePair<string, CoinFullAggregatedDataDisplay>>, IDictionary, ICollection, IEnumerable Constructors Volume24HDisplay(IDictionary<String, CoinFullAggregatedDataDisplay>) Declaration public Volume24HDisplay(IDictionary<string, CoinFullAggregatedDataDisplay> dictionary) Parameters Type Name Description IDictionary < String , CoinFullAggregatedDataDisplay > dictionary Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/CryptoCompare.TopExchangeFullResponse.html": {
    "href": "api/CryptoCompare.TopExchangeFullResponse.html",
    "title": "Class TopExchangeFullResponse | CryptoCompare C# client",
    "keywords": "Class TopExchangeFullResponse Inheritance Object BaseApiResponse TopExchangeFullResponse Inherited Members BaseApiResponse.ErrorsSummary BaseApiResponse.IsSuccessfulResponse BaseApiResponse.Path BaseApiResponse.Status BaseApiResponse.StatusMessage BaseApiResponse.StatusType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class TopExchangeFullResponse : BaseApiResponse Properties Data Declaration public TopExchangeInfo Data { get; set; } Property Value Type Description TopExchangeInfo"
  },
  "api/CryptoCompare.MiningClient.html": {
    "href": "api/CryptoCompare.MiningClient.html",
    "title": "Class MiningClient | CryptoCompare C# client",
    "keywords": "Class MiningClient Inheritance Object BaseApiClient MiningClient Implements IMiningClient IApiClient Inherited Members BaseApiClient.GetAsync<TApiResponse>(Uri) BaseApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class MiningClient : BaseApiClient, IMiningClient, IApiClient Constructors MiningClient(HttpClient) Initializes a new instance of the CryptoCompare.MiningClient class. Declaration public MiningClient(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The HTTP client. This cannot be null. Methods ContractsAsync() Returns all the mining contracts. Declaration public Task<MiningContractsResponse> ContractsAsync() Returns Type Description Task < MiningContractsResponse > The asynchronous result that yields a MiningContractsResponse. EquipmentsAsync() Used to get all the mining equipment available on the website. Declaration public Task<MiningEquipmentsResponse> EquipmentsAsync() Returns Type Description Task < MiningEquipmentsResponse > The asynchronous result that yields a MiningEquipmentsResponse. Implements IMiningClient IApiClient"
  },
  "api/CryptoCompare.IRateLimitClient.html": {
    "href": "api/CryptoCompare.IRateLimitClient.html",
    "title": "Interface IRateLimitClient | CryptoCompare C# client",
    "keywords": "Interface IRateLimitClient Interface of api client for cryptocompare api calls rate limits. Inherited Members IApiClient.GetAsync<TApiResponse>(Uri) IApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public interface IRateLimitClient : IApiClient Methods CurrentHourAsync() Gets the rate limits left for you on the histo, price and news paths in the current hour.. Declaration Task<RateLimitResponse> CurrentHourAsync() Returns Type Description Task < RateLimitResponse >"
  },
  "api/CryptoCompare.IExchangesClient.html": {
    "href": "api/CryptoCompare.IExchangesClient.html",
    "title": "Interface IExchangesClient | CryptoCompare C# client",
    "keywords": "Interface IExchangesClient Interface for exchanges api client. Inherited Members IApiClient.GetAsync<TApiResponse>(Uri) IApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public interface IExchangesClient : IApiClient Methods ListAsync() all the exchanges that CryptoCompare has integrated with.. Declaration Task<ExchangeListResponse> ListAsync() Returns Type Description Task < ExchangeListResponse >"
  },
  "api/CryptoCompare.CoinsClient.html": {
    "href": "api/CryptoCompare.CoinsClient.html",
    "title": "Class CoinsClient | CryptoCompare C# client",
    "keywords": "Class CoinsClient The coins client. Gets general info for all the coins available on the website. Inheritance Object BaseApiClient CoinsClient Implements ICoinsClient IApiClient Inherited Members BaseApiClient.GetAsync<TApiResponse>(Uri) BaseApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CoinsClient : BaseApiClient, ICoinsClient, IApiClient Constructors CoinsClient(HttpClient) Initializes a new instance of the CryptoCompare.Clients.CoinsClient class. Declaration public CoinsClient(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The HTTP client. This cannot be null. Methods ListAsync() Returns all the coins that CryptoCompare has added to the website. Declaration public Task<CoinListResponse> ListAsync() Returns Type Description Task < CoinListResponse > See Also CryptoCompare.Clients.ICoinsClient.AllCoinsAsync() SnapshotAsync(String, String) Gets data for a currency pair. It returns general block explorer information, aggregated data and individual data for each exchange available. Declaration public Task<CoinSnapshotResponse> SnapshotAsync(string fromSymbol, string toSymbol) Parameters Type Name Description String fromSymbol The symbol of the currency you want to get that for. String toSymbol The symbol of the currency that data will be in. Returns Type Description Task < CoinSnapshotResponse > See Also CryptoCompare.Clients.ICoinsClient.SnapshotAsync(string,string) SnapshotFullAsync(Int32) Get the general, subs (used to connect to the streamer and to figure out what exchanges we have data for and what are the exact coin pairs of the coin) and the aggregated prices for all pairs available.. Declaration public Task<CoinSnapshotFullResponse> SnapshotFullAsync(int id) Parameters Type Name Description Int32 id The id of the coin you want data for. Returns Type Description Task < CoinSnapshotFullResponse > The asynchronous result that yields a full CoinSnapshot. Implements ICoinsClient IApiClient See Also CryptoCompare.Clients.ICoinsClient"
  },
  "api/CryptoCompare.BaseApiResponse.html": {
    "href": "api/CryptoCompare.BaseApiResponse.html",
    "title": "Class BaseApiResponse | CryptoCompare C# client",
    "keywords": "Class BaseApiResponse A base API response. CryptoCompare don't use status code for errors. They use a status reported into \"Response\" property Inheritance Object BaseApiResponse CoinListResponse CoinSnapshotFullResponse CoinSnapshotResponse ExchangeHistoryResponse HistoryResponse MiningContractsResponse MiningEquipmentsResponse RateLimitResponse TopExchangeFullResponse TopMarketCapResponse TopResponse TopVolume24HResponse TopVolumesResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class BaseApiResponse Properties ErrorsSummary Gets or sets the errors summary. Declaration public string ErrorsSummary { get; set; } Property Value Type Description String IsSuccessfulResponse Gets or sets a value indicating whether this is a successful response. Declaration public bool IsSuccessfulResponse { get; } Property Value Type Description Boolean True if this is a successful response, false if not. Path Gets or sets the full pathname of the resource called. Declaration public string Path { get; set; } Property Value Type Description String Status Gets or sets the response status. Declaration [JsonProperty(\"Response\")] public string Status { get; set; } Property Value Type Description String StatusMessage Gets or sets the message. Declaration [JsonProperty(\"Message\")] public string StatusMessage { get; set; } Property Value Type Description String StatusType Gets or sets the type of the status. Declaration [JsonProperty(\"Type\")] public int StatusType { get; set; } Property Value Type Description Int32"
  },
  "api/CryptoCompare.TopListClient.html": {
    "href": "api/CryptoCompare.TopListClient.html",
    "title": "Class TopListClient | CryptoCompare C# client",
    "keywords": "Class TopListClient Client for \"tops\" endpoints (Exchanges, volumes, pairs). Inheritance Object BaseApiClient TopListClient Implements ITopListClient IApiClient Inherited Members BaseApiClient.GetAsync<TApiResponse>(Uri) BaseApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class TopListClient : BaseApiClient, ITopListClient, IApiClient Constructors TopListClient(HttpClient) Initializes a new instance of the CryptoCompare.TopsClient class. Declaration public TopListClient(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The HTTP client. This cannot be null. Methods ByPairVolumeAsync(String, Nullable<Int32>) Get top coins by volume for the to currency. It returns volume24hto and total supply (where available). The number of coins you get is the minimum of the limit you set (default 50) and the total number of coins available. Declaration public Task<TopVolumesResponse> ByPairVolumeAsync(string toSymbol, int? limit = default(int? )) Parameters Type Name Description String toSymbol to symbol. Nullable < Int32 > limit (Optional) The limit. Returns Type Description Task < TopVolumesResponse > An asynchronous result that yields a TopVolumesResponse. CoinFullDataBy24HVolume(String, Nullable<Int32>, Nullable<Int32>, Nullable<Boolean>) Get full data for the top coins ordered by their total volume across all markets in the last 24 hours as expressed in a given currency. Declaration public Task<TopVolume24HResponse> CoinFullDataBy24HVolume(string toSymbol, int? limit = default(int? ), int? page = default(int? ), bool? sign = default(bool? )) Parameters Type Name Description String toSymbol The symbol of the currency into which the market cap are expressed. Nullable < Int32 > limit (Optional)The number currencies to return, default is 10. Nullable < Int32 > page (Optional)The pagination for the request. Nullable < Boolean > sign (Optional)If set to true, the server will sign the requests, this is useful for usage in smart contracts. Returns Type Description Task < TopVolume24HResponse > The asynchronous result that yields a TopVolume24HResponse. CoinFullDataByMarketCap(String, Nullable<Int32>, Nullable<Int32>, Nullable<Boolean>) Get full data for the top coins ordered by market cap as expressed in a given currency. Declaration public Task<TopMarketCapResponse> CoinFullDataByMarketCap(string toSymbol, int? limit = default(int? ), int? page = default(int? ), bool? sign = default(bool? )) Parameters Type Name Description String toSymbol The symbol of the currency into which the market cap are expressed. Nullable < Int32 > limit (Optional)The number currencies to return, default is 10. Nullable < Int32 > page (Optional)The pagination for the request. Nullable < Boolean > sign (Optional)If set to true, the server will sign the requests, this is useful for usage in smart contracts. Returns Type Description Task < TopMarketCapResponse > The asynchronous result that yields a TopMarketCapResponse. ExchangesFullDataByPairAsync(String, String, Nullable<Int32>) Get top exchanges by volume for a currency pair plus the full CCCAGG data. The number of exchanges you get is the minimum of the limit you set (default 5) and the total number of exchanges available. Declaration public Task<TopExchangeFullResponse> ExchangesFullDataByPairAsync(string fromSymbol, string toSymbol, int? limit = default(int? )) Parameters Type Name Description String fromSymbol The cryptocurrency symbol of interest. String toSymbol The currency symbol to convert into. Nullable < Int32 > limit (Optional)The number of data points to return. Returns Type Description Task < TopExchangeFullResponse > The asynchronous result that yields a TopResponse. ExchangesVolumeDataByPairAsync(String, String, Nullable<Int32>) Get top exchanges by volume for a currency pair. The number of exchanges you get is the minimum of the limit you set (default 5) and the total number of exchanges available. Declaration public Task<TopResponse> ExchangesVolumeDataByPairAsync(string fromSymbol, string toSymbol, int? limit = default(int? )) Parameters Type Name Description String fromSymbol from symbol. String toSymbol to symbol. Nullable < Int32 > limit (Optional) The limit. Returns Type Description Task < TopResponse > An asynchronous result that yields a TopResponse. TradingPairsAsync(String, Nullable<Int32>) Get top pairs by volume for a currency (always uses our aggregated data). The number of pairs you get is the minimum of the limit you set (default 5) and the total number of pairs available. Declaration public Task<TopResponse> TradingPairsAsync(string fromSymbol, int? limit = default(int? )) Parameters Type Name Description String fromSymbol from symbol. Nullable < Int32 > limit (Optional) The limit. Returns Type Description Task < TopResponse > An asynchronous result that yields a TopResponse. Implements ITopListClient IApiClient See Also BaseApiClient CryptoCompare.ITopsClient"
  },
  "api/CryptoCompare.TopInfo.html": {
    "href": "api/CryptoCompare.TopInfo.html",
    "title": "Class TopInfo | CryptoCompare C# client",
    "keywords": "Class TopInfo Inheritance Object TopInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class TopInfo Properties Exchange Declaration public string Exchange { get; set; } Property Value Type Description String FromSymbol Declaration public string FromSymbol { get; set; } Property Value Type Description String ToSymbol Declaration public string ToSymbol { get; set; } Property Value Type Description String Volume24H Declaration public decimal Volume24H { get; set; } Property Value Type Description Decimal Volume24HTo Declaration public decimal Volume24HTo { get; set; } Property Value Type Description Decimal"
  },
  "api/CryptoCompare.CryptopianFollower.html": {
    "href": "api/CryptoCompare.CryptopianFollower.html",
    "title": "Class CryptopianFollower | CryptoCompare C# client",
    "keywords": "Class CryptopianFollower Inheritance Object CryptopianFollower Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CryptopianFollower Properties Id Declaration [JsonProperty(\"Id\")] public long Id { get; set; } Property Value Type Description Int64 ImageUrl Declaration [JsonProperty(\"ImageUrl\")] public string ImageUrl { get; set; } Property Value Type Description String Name Declaration [JsonProperty(\"Name\")] public string Name { get; set; } Property Value Type Description String Type Declaration [JsonProperty(\"Type\")] public string Type { get; set; } Property Value Type Description String Url Declaration [JsonProperty(\"Url\")] public string Url { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.CoinSnapshotResponse.html": {
    "href": "api/CryptoCompare.CoinSnapshotResponse.html",
    "title": "Class CoinSnapshotResponse | CryptoCompare C# client",
    "keywords": "Class CoinSnapshotResponse Inheritance Object BaseApiResponse CoinSnapshotResponse Inherited Members BaseApiResponse.ErrorsSummary BaseApiResponse.IsSuccessfulResponse BaseApiResponse.Path BaseApiResponse.Status BaseApiResponse.StatusMessage BaseApiResponse.StatusType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CoinSnapshotResponse : BaseApiResponse Properties Data Declaration public CoinSnapshotData Data { get; set; } Property Value Type Description CoinSnapshotData"
  },
  "api/CryptoCompare.ISocialStatsClient.html": {
    "href": "api/CryptoCompare.ISocialStatsClient.html",
    "title": "Interface ISocialStatsClient | CryptoCompare C# client",
    "keywords": "Interface ISocialStatsClient Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public interface ISocialStatsClient Methods StatsAsync(Int32) Get all the available social stats for a coin. Declaration Task<SocialStatsResponse> StatsAsync(int id) Parameters Type Name Description Int32 id coin id. Returns Type Description Task < SocialStatsResponse > An asynchronous result that yields an object containing the social stats."
  },
  "api/CryptoCompare.IHistoryClient.html": {
    "href": "api/CryptoCompare.IHistoryClient.html",
    "title": "Interface IHistoryClient | CryptoCompare C# client",
    "keywords": "Interface IHistoryClient Inherited Members IApiClient.GetAsync<TApiResponse>(Uri) IApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public interface IHistoryClient : IApiClient Methods DailyAsync(String, String, Nullable<Int32>, String, Nullable<DateTimeOffset>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>) Get open, high, low, close, volumefrom and volumeto from the daily historical data. The values are based on 00:00 GMT time.It uses BTC conversion if data is not available because the coin is not trading in the specified currency. Declaration Task<HistoryResponse> DailyAsync(string fromSymbol, string toSymbol, int? limit, string exchangeName = null, DateTimeOffset? toDate = default(DateTimeOffset? ), bool? allData = default(bool? ), int? aggregate = default(int? ), bool? tryConversion = default(bool? )) Parameters Type Name Description String fromSymbol from symbol. This cannot be null. String toSymbol to symbol. This cannot be null. Nullable < Int32 > limit The limit number of returned results. String exchangeName Exchange name. Nullable < DateTimeOffset > toDate to date. Nullable < Boolean > allData (Optional) retrieve all data. Nullable < Int32 > aggregate (Optional) aggregates result. Nullable < Boolean > tryConversion (Optional) tries conversion. Returns Type Description Task < HistoryResponse > DayAveragePriceAsync(String, String, String, Nullable<DateTimeOffset>, Nullable<CalculationType>, Nullable<Int32>, Nullable<Boolean>) Get day average price. The values are based on hourly vwap data and the average can be calculated in different ways. It uses BTC conversion if data is not available because the coin is not trading in the specified currency. If tryConversion is set to false it will give you the direct data. If no toTS is given it will automatically do the current day. Also for different timezones use the UTCHourDiff param The calculation types are: HourVWAP - a VWAP of the hourly close price MidHighLow - the average between the 24 H high and low. VolFVolT - the total volume from / the total volume to (only avilable with tryConversion set to false so only for direct trades but the value should be the most accurate average day price) Declaration Task<HistoryDayAverageResponse> DayAveragePriceAsync(string fromSymbol, string toSymbol, string exchangeName = null, DateTimeOffset? toDate = default(DateTimeOffset? ), CalculationType? avgType = default(CalculationType? ), int? utcHourDiff = default(int? ), bool? tryConversion = default(bool? )) Parameters Type Name Description String fromSymbol The cryptocurrency symbol of interest. This cannot be null String toSymbol The currency symbol to convert into. This cannot be null. String exchangeName (Optional) The exchange to obtain data from (our aggregated average - CCCAGG - by default) . Nullable < DateTimeOffset > toDate (Optional) Last unix timestamp to return data for. Nullable < CalculationType > avgType (Optional) Type of the average. Nullable < Int32 > utcHourDiff (Optional) By deafult it does UTC, if you want a different time zone just pass the hour difference. For PST you would pass -8 for example. Nullable < Boolean > tryConversion (Optional) If set to false, it will try to get only direct trading values. Returns Type Description Task < HistoryDayAverageResponse > ExchangeDailyAsync(String, String, Nullable<DateTimeOffset>, Nullable<Int32>, Nullable<Int32>, Nullable<Boolean>) Get total volume from the daily historical exchange data.The values are based on 00:00 GMT time. We store the data in BTC and we multiply by the BTC-tsym value. Declaration Task<ExchangeHistoryResponse> ExchangeDailyAsync(string toSymbol, string exchangeName = null, DateTimeOffset? toDate = default(DateTimeOffset? ), int? limit = default(int? ), int? aggregate = default(int? ), bool? aggregatePredictableTimePeriods = default(bool? )) Parameters Type Name Description String toSymbol The currency symbol to convert into . This cannot be null. String exchangeName (Optional) The exchange to obtain data from (our aggregated average - CCCAGG - by default) . Nullable < DateTimeOffset > toDate (Optional) Last unix timestamp to return data for. Nullable < Int32 > limit (Optional) The number of data points to return. Nullable < Int32 > aggregate (Optional) Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes). Nullable < Boolean > aggregatePredictableTimePeriods (Optional) True by default, only used when the aggregate param is also in use. If false it will aggregate based on the current time. If the param is false and the time you make the call is 1pm - 2pm, with aggregate 2, it will create the time slots: ... 9am, 11am, 1pm. If the param is false and the time you make the call is 2pm - 3pm, with aggregate 2, it will create the time slots: ... 10am, 12am, 2pm. If the param is true (default) and the time you make the call is 1pm - 2pm, with aggregate 2, it will create the time slots: ... 8am, 10am, 12pm. If the param is true (default) and the time you make the call is 2pm - 3pm, with aggregate 2, it will create the time slots: ... 10am, 12am, 2pm.. Returns Type Description Task < ExchangeHistoryResponse > The asynchronous result that yields a HistoryResponse. ExchangeHourlyAsync(String, String, Nullable<DateTimeOffset>, Nullable<Int32>, Nullable<Int32>, Nullable<Boolean>) Get total volume from the hourly historical exchange data.We store the data in BTC and we multiply by the BTC-tsym value. Declaration Task<ExchangeHistoryResponse> ExchangeHourlyAsync(string toSymbol, string exchangeName = null, DateTimeOffset? toDate = default(DateTimeOffset? ), int? limit = default(int? ), int? aggregate = default(int? ), bool? aggregatePredictableTimePeriods = default(bool? )) Parameters Type Name Description String toSymbol The currency symbol to convert into . This cannot be null. String exchangeName (Optional) The exchange to obtain data from (our aggregated average - CCCAGG - by default) . Nullable < DateTimeOffset > toDate (Optional) Last unix timestamp to return data for. Nullable < Int32 > limit (Optional) The number of data points to return. Nullable < Int32 > aggregate (Optional) Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes). Nullable < Boolean > aggregatePredictableTimePeriods (Optional) True by default, only used when the aggregate param is also in use. If false it will aggregate based on the current time. If the param is false and the time you make the call is 1pm - 2pm, with aggregate 2, it will create the time slots: ... 9am, 11am, 1pm. If the param is false and the time you make the call is 2pm - 3pm, with aggregate 2, it will create the time slots: ... 10am, 12am, 2pm. If the param is true (default) and the time you make the call is 1pm - 2pm, with aggregate 2, it will create the time slots: ... 8am, 10am, 12pm. If the param is true (default) and the time you make the call is 2pm - 3pm, with aggregate 2, it will create the time slots: ... 10am, 12am, 2pm.. Returns Type Description Task < ExchangeHistoryResponse > The asynchronous result that yields a HistoryResponse. HistoricalForTimestampAsync(String, IEnumerable<String>, DateTimeOffset, IEnumerable<String>, Nullable<CalculationType>, Nullable<Boolean>) Get the price of any cryptocurrency in any other currency that you need at a given timestamp. The price comes from the daily info - so it would be the price at the end of the day GMT based on the requested TS. If the crypto does not trade directly into the toSymbol requested, BTC will be used for conversion. Tries to get direct trading pair data, if there is none or it is more than 10 days before the ts requested, it uses BTC conversion. If the oposite pair trades we invert it (eg.: BTC-XMR)The calculation types are: Close - a Close of the day close price,MidHighLow - the average between the 24 H high and low.VolFVolT - the total volume to / the total volume from Declaration Task<PriceHistoricalReponse> HistoricalForTimestampAsync(string fromSymbol, IEnumerable<string> toSymbols, DateTimeOffset requestedDate, IEnumerable<string> markets = null, CalculationType? calculationType = default(CalculationType? ), bool? tryConversion = default(bool? )) Parameters Type Name Description String fromSymbol from symbol. IEnumerable < String > toSymbols to symbols. DateTimeOffset requestedDate The requested date. IEnumerable < String > markets (Optional) Names of Exchanges default => CCCAGG. Nullable < CalculationType > calculationType (Optional) Type of the calculation. Nullable < Boolean > tryConversion (Optional) If set to false, it will try to get values without using any conversion at all (defaultVal:true) Returns Type Description Task < PriceHistoricalReponse > HourlyAsync(String, String, Nullable<Int32>, String, Nullable<DateTimeOffset>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>) Get open, high, low, close, volumefrom and volumeto from the hourly historical data. It uses BTC conversion if data is not available because the coin is not trading in the specified currency. Declaration Task<HistoryResponse> HourlyAsync(string fromSymbol, string toSymbol, int? limit = default(int? ), string exchangeName = null, DateTimeOffset? toDate = default(DateTimeOffset? ), bool? allData = default(bool? ), int? aggregate = default(int? ), bool? tryConversion = default(bool? )) Parameters Type Name Description String fromSymbol from symbol. This cannot be null. String toSymbol to symbol. This cannot be null. Nullable < Int32 > limit The limit number of returned results. String exchangeName Exchange name. Nullable < DateTimeOffset > toDate to date. Nullable < Boolean > allData (Optional) retrieve all data. Nullable < Int32 > aggregate (Optional) aggregates result. Nullable < Boolean > tryConversion (Optional) tries conversion. Returns Type Description Task < HistoryResponse > MinutelyAsync(String, String, Nullable<Int32>, String, Nullable<DateTimeOffset>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>) Get open, high, low, close, volumefrom and volumeto from the each minute historical data. This data is only stored for 7 days, if you need more,use the hourly or daily path. It uses BTC conversion if data is not available because the coin is not trading in the specified currency. Declaration Task<HistoryResponse> MinutelyAsync(string fromSymbol, string toSymbol, int? limit = default(int? ), string exchangeName = null, DateTimeOffset? toDate = default(DateTimeOffset? ), bool? allData = default(bool? ), int? aggregate = default(int? ), bool? tryConversion = default(bool? )) Parameters Type Name Description String fromSymbol from symbol. This cannot be null. String toSymbol to symbol. This cannot be null. Nullable < Int32 > limit The limit number of returned results. String exchangeName Exchange name. Nullable < DateTimeOffset > toDate to date. Nullable < Boolean > allData (Optional) retrieve all data. Nullable < Int32 > aggregate (Optional) aggregates result. Nullable < Boolean > tryConversion (Optional) tries conversion. Returns Type Description Task < HistoryResponse >"
  },
  "api/CryptoCompare.INewsClient.html": {
    "href": "api/CryptoCompare.INewsClient.html",
    "title": "Interface INewsClient | CryptoCompare C# client",
    "keywords": "Interface INewsClient Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public interface INewsClient Methods News(String, Nullable<Int64>, String[], Nullable<Boolean>) Get all news Declaration Task<IEnumerable<NewsEntity>> News(string lang = null, long? lTs = default(long? ), string[] feeds = null, bool? sign = default(bool? )) Parameters Type Name Description String lang Language - EN,PT etc. Nullable < Int64 > lTs Timestamp String [] feeds Feeds - for news Nullable < Boolean > sign if true cryptocompare will sign request Returns Type Description Task < IEnumerable < NewsEntity >> NewsProviders() Return all news providers. Declaration Task<IEnumerable<NewsProvider>> NewsProviders() Returns Type Description Task < IEnumerable < NewsProvider >>"
  },
  "api/CryptoCompare.HistoryClient.html": {
    "href": "api/CryptoCompare.HistoryClient.html",
    "title": "Class HistoryClient | CryptoCompare C# client",
    "keywords": "Class HistoryClient Inheritance Object BaseApiClient HistoryClient Implements IHistoryClient IApiClient Inherited Members BaseApiClient.GetAsync<TApiResponse>(Uri) BaseApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class HistoryClient : BaseApiClient, IHistoryClient, IApiClient Constructors HistoryClient(HttpClient) Declaration public HistoryClient(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient Methods DailyAsync(String, String, Nullable<Int32>, String, Nullable<DateTimeOffset>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>) Get open, high, low, close, volumefrom and volumeto from the daily historical data. The values are based on 00:00 GMT time.It uses BTC conversion if data is not available because the coin is not trading in the specified currency. Declaration public Task<HistoryResponse> DailyAsync(string fromSymbol, string toSymbol, int? limit = default(int? ), string exchangeName = null, DateTimeOffset? toDate = default(DateTimeOffset? ), bool? allData = default(bool? ), int? aggregate = default(int? ), bool? tryConversion = default(bool? )) Parameters Type Name Description String fromSymbol from symbol. This cannot be null. String toSymbol to symbol. This cannot be null. Nullable < Int32 > limit The limit number of returned results. String exchangeName List of exchanges names. Nullable < DateTimeOffset > toDate to date. Nullable < Boolean > allData (Optional) retrieve all data. Nullable < Int32 > aggregate (Optional) aggregates result. Nullable < Boolean > tryConversion (Optional) tries conversion. Returns Type Description Task < HistoryResponse > DayAveragePriceAsync(String, String, String, Nullable<DateTimeOffset>, Nullable<CalculationType>, Nullable<Int32>, Nullable<Boolean>) Declaration public Task<HistoryDayAverageResponse> DayAveragePriceAsync(string fromSymbol, string toSymbol, string exchangeName = null, DateTimeOffset? toDate = default(DateTimeOffset? ), CalculationType? avgType = default(CalculationType? ), int? utcHourDiff = default(int? ), bool? tryConversion = default(bool? )) Parameters Type Name Description String fromSymbol String toSymbol String exchangeName Nullable < DateTimeOffset > toDate Nullable < CalculationType > avgType Nullable < Int32 > utcHourDiff Nullable < Boolean > tryConversion Returns Type Description Task < HistoryDayAverageResponse > ExchangeDailyAsync(String, String, Nullable<DateTimeOffset>, Nullable<Int32>, Nullable<Int32>, Nullable<Boolean>) Declaration public Task<ExchangeHistoryResponse> ExchangeDailyAsync(string toSymbol, string exchangeName = null, DateTimeOffset? toDate = default(DateTimeOffset? ), int? limit = default(int? ), int? aggregate = default(int? ), bool? aggregatePredictableTimePeriods = default(bool? )) Parameters Type Name Description String toSymbol String exchangeName Nullable < DateTimeOffset > toDate Nullable < Int32 > limit Nullable < Int32 > aggregate Nullable < Boolean > aggregatePredictableTimePeriods Returns Type Description Task < ExchangeHistoryResponse > ExchangeHistoryAsync(String, String, String, Nullable<DateTimeOffset>, Nullable<Int32>, Nullable<Int32>, Nullable<Boolean>) Declaration public Task<ExchangeHistoryResponse> ExchangeHistoryAsync(string method, string toSymbol, string exchangeName = null, DateTimeOffset? toDate = default(DateTimeOffset? ), int? limit = default(int? ), int? aggregate = default(int? ), bool? aggregatePredictableTimePeriods = default(bool? )) Parameters Type Name Description String method String toSymbol String exchangeName Nullable < DateTimeOffset > toDate Nullable < Int32 > limit Nullable < Int32 > aggregate Nullable < Boolean > aggregatePredictableTimePeriods Returns Type Description Task < ExchangeHistoryResponse > ExchangeHourlyAsync(String, String, Nullable<DateTimeOffset>, Nullable<Int32>, Nullable<Int32>, Nullable<Boolean>) Declaration public Task<ExchangeHistoryResponse> ExchangeHourlyAsync(string toSymbol, string exchangeName = null, DateTimeOffset? toDate = default(DateTimeOffset? ), int? limit = default(int? ), int? aggregate = default(int? ), bool? aggregatePredictableTimePeriods = default(bool? )) Parameters Type Name Description String toSymbol String exchangeName Nullable < DateTimeOffset > toDate Nullable < Int32 > limit Nullable < Int32 > aggregate Nullable < Boolean > aggregatePredictableTimePeriods Returns Type Description Task < ExchangeHistoryResponse > HistoricalForTimestampAsync(String, IEnumerable<String>, DateTimeOffset, IEnumerable<String>, Nullable<CalculationType>, Nullable<Boolean>) Get the price of any cryptocurrency in any other currency that you need at a given timestamp. The price comes from the daily info - so it would be the price at the end of the day GMT based on the requested TS. If the crypto does not trade directly into the toSymbol requested, BTC will be used for conversion. Tries to get direct trading pair data, if there is none or it is more than 10 days before the ts requested, it uses BTC conversion. If the oposite pair trades we invert it (eg.: BTC-XMR)The calculation types are: Close - a Close of the day close price,MidHighLow - the average between the 24 H high and low.VolFVolT - the total volume to / the total volume from. Declaration public Task<PriceHistoricalReponse> HistoricalForTimestampAsync(string fromSymbol, IEnumerable<string> toSymbols, DateTimeOffset requestedDate, IEnumerable<string> markets = null, CalculationType? calculationType = default(CalculationType? ), bool? tryConversion = default(bool? )) Parameters Type Name Description String fromSymbol from symbol. IEnumerable < String > toSymbols to symbols. DateTimeOffset requestedDate The requested date. IEnumerable < String > markets (Optional) Exchange name default => CCCAGG. Nullable < CalculationType > calculationType (Optional) Type of the calculation. Nullable < Boolean > tryConversion (Optional) If set to false, it will try to get values without using any conversion at all (defaultVal:true) Returns Type Description Task < PriceHistoricalReponse > HourlyAsync(String, String, Nullable<Int32>, String, Nullable<DateTimeOffset>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>) Get open, high, low, close, volumefrom and volumeto from the hourly historical data. It uses BTC conversion if data is not available because the coin is not trading in the specified currency. Declaration public Task<HistoryResponse> HourlyAsync(string fromSymbol, string toSymbol, int? limit = default(int? ), string exchangeName = null, DateTimeOffset? toDate = default(DateTimeOffset? ), bool? allData = default(bool? ), int? aggregate = default(int? ), bool? tryConversion = default(bool? )) Parameters Type Name Description String fromSymbol from symbol. This cannot be null. String toSymbol to symbol. This cannot be null. Nullable < Int32 > limit The limit number of returned results. String exchangeName List of exchanges names. Nullable < DateTimeOffset > toDate to date. Nullable < Boolean > allData (Optional) retrieve all data. Nullable < Int32 > aggregate (Optional) aggregates result. Nullable < Boolean > tryConversion (Optional) tries conversion. Returns Type Description Task < HistoryResponse > MinutelyAsync(String, String, Nullable<Int32>, String, Nullable<DateTimeOffset>, Nullable<Boolean>, Nullable<Int32>, Nullable<Boolean>) Get open, high, low, close, volumefrom and volumeto from the each minute historical data. This data is only stored for 7 days, if you need more,use the hourly or daily path. It uses BTC conversion if data is not available because the coin is not trading in the specified currency. Declaration public Task<HistoryResponse> MinutelyAsync(string fromSymbol, string toSymbol, int? limit = default(int? ), string exchangeName = null, DateTimeOffset? toDate = default(DateTimeOffset? ), bool? allData = default(bool? ), int? aggregate = default(int? ), bool? tryConversion = default(bool? )) Parameters Type Name Description String fromSymbol from symbol. This cannot be null. String toSymbol to symbol. This cannot be null. Nullable < Int32 > limit The limit number of returned results. String exchangeName List of exchanges names. Nullable < DateTimeOffset > toDate to date. Nullable < Boolean > allData (Optional) retrieve all data. Nullable < Int32 > aggregate (Optional) aggregates result. Nullable < Boolean > tryConversion (Optional) tries conversion. Returns Type Description Task < HistoryResponse > Implements IHistoryClient IApiClient"
  },
  "api/CryptoCompare.SubList.html": {
    "href": "api/CryptoCompare.SubList.html",
    "title": "Class SubList | CryptoCompare C# client",
    "keywords": "Class SubList Inheritance Object SubList Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class SubList Properties Current Declaration [JsonConverter(typeof(StringToSubConverter))] public IReadOnlyList<Sub> Current { get; set; } Property Value Type Description IReadOnlyList < Sub > CurrentAgg Declaration [JsonConverter(typeof(StringToSubConverter))] public Sub CurrentAgg { get; set; } Property Value Type Description Sub Trades Declaration [JsonConverter(typeof(StringToSubConverter))] public IReadOnlyList<Sub> Trades { get; set; } Property Value Type Description IReadOnlyList < Sub >"
  },
  "api/CryptoCompare.RateLimitClient.html": {
    "href": "api/CryptoCompare.RateLimitClient.html",
    "title": "Class RateLimitClient | CryptoCompare C# client",
    "keywords": "Class RateLimitClient Api client for cryptocompare api calls rate limits. Inheritance Object BaseApiClient RateLimitClient Implements IRateLimitClient IApiClient Inherited Members BaseApiClient.GetAsync<TApiResponse>(Uri) BaseApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class RateLimitClient : BaseApiClient, IRateLimitClient, IApiClient Constructors RateLimitClient(HttpClient) Initializes a new instance of the CryptoCompare.Clients.RateLimitsClient class. Declaration public RateLimitClient(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The HTTP client. This cannot be null. Methods CurrentHourAsync() Gets the rate limits left for you on the histo, price and news paths in the current hour. Declaration public Task<RateLimitResponse> CurrentHourAsync() Returns Type Description Task < RateLimitResponse > See Also CryptoCompare.Clients.IRateLimitsClient.Hour() Implements IRateLimitClient IApiClient See Also CryptoCompare.Clients.BaseApiClient CryptoCompare.Clients.IRateLimitsClient"
  },
  "api/CryptoCompare.Parent.html": {
    "href": "api/CryptoCompare.Parent.html",
    "title": "Class Parent | CryptoCompare C# client",
    "keywords": "Class Parent Inheritance Object Parent Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class Parent Properties InternalId Declaration [JsonProperty(\"InternalId\")] public long InternalId { get; set; } Property Value Type Description Int64 Name Declaration [JsonProperty(\"Name\")] public string Name { get; set; } Property Value Type Description String Url Declaration [JsonProperty(\"Url\")] public string Url { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.MiningContract.html": {
    "href": "api/CryptoCompare.MiningContract.html",
    "title": "Class MiningContract | CryptoCompare C# client",
    "keywords": "Class MiningContract Inheritance Object MiningData MiningContract Inherited Members MiningData.AffiliateUrl MiningData.Algorithm MiningData.Company MiningData.Cost MiningData.CurrenciesAvailable MiningData.CurrenciesAvailableLogo MiningData.CurrenciesAvailableName MiningData.Currency MiningData.HashesPerSecond MiningData.Id MiningData.LogoUrl MiningData.Name MiningData.ParentId MiningData.Recommended MiningData.Sponsored MiningData.Url Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class MiningContract : MiningData Properties ContractLength Declaration public string ContractLength { get; set; } Property Value Type Description String FeePercentage Declaration public string FeePercentage { get; set; } Property Value Type Description String FeeValue Declaration public double FeeValue { get; set; } Property Value Type Description Double FeeValueCurrency Declaration public string FeeValueCurrency { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.Twitter.html": {
    "href": "api/CryptoCompare.Twitter.html",
    "title": "Class Twitter | CryptoCompare C# client",
    "keywords": "Class Twitter Inheritance Object Twitter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class Twitter Properties AccountCreation Declaration [JsonProperty(\"account_creation\")] public string AccountCreation { get; set; } Property Value Type Description String Favourites Declaration [JsonProperty(\"favourites\")] public string Favourites { get; set; } Property Value Type Description String Followers Declaration [JsonProperty(\"followers\")] public long Followers { get; set; } Property Value Type Description Int64 Following Declaration [JsonProperty(\"following\")] public string Following { get; set; } Property Value Type Description String Link Declaration [JsonProperty(\"link\")] public string Link { get; set; } Property Value Type Description String Lists Declaration [JsonProperty(\"lists\")] public long Lists { get; set; } Property Value Type Description Int64 Name Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description String Points Declaration [JsonProperty(\"Points\")] public long Points { get; set; } Property Value Type Description Int64 Statuses Declaration [JsonProperty(\"statuses\")] public long Statuses { get; set; } Property Value Type Description Int64"
  },
  "api/CryptoCompare.BaseApiClient.html": {
    "href": "api/CryptoCompare.BaseApiClient.html",
    "title": "Class BaseApiClient | CryptoCompare C# client",
    "keywords": "Class BaseApiClient A base API client. Inheritance Object BaseApiClient CoinsClient ExchangesClient HistoryClient MiningClient NewsClient PriceClient RateLimitClient SocialStatsClient SubsClient TopListClient Implements IApiClient Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public abstract class BaseApiClient : IApiClient Constructors BaseApiClient(HttpClient) Initializes a new instance of the CryptoCompare.Clients.BaseApiClient class. Declaration protected BaseApiClient(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The HTTP client. This cannot be null. Methods GetAsync<TApiResponse>(Uri) Sends an api request asynchronously usin GET method. Declaration public Task<TApiResponse> GetAsync<TApiResponse>(Uri resourceUri) Parameters Type Name Description Uri resourceUri The resource uri path. Returns Type Description Task <TApiResponse> The asynchronous result that yields the asynchronous. Type Parameters Name Description TApiResponse Type of the API response. See Also CryptoCompare.Clients.IApiClient.GetAsync{TApiResponse}(Uri) SendRequestAsync<TApiResponse>(HttpMethod, Uri) Sends an api request asynchronously. Declaration public Task<TApiResponse> SendRequestAsync<TApiResponse>(HttpMethod httpMethod, Uri resourceUri) Parameters Type Name Description HttpMethod httpMethod The HttpMethod Uri resourceUri The resource uri path Returns Type Description Task <TApiResponse> The asynchronous result that yields a TApiResponse. Type Parameters Name Description TApiResponse Type of the API response. Exceptions Type Condition CryptoCompareException Thrown when a CryptoCompare api error occurs. Implements IApiClient"
  },
  "api/CryptoCompare.MarketCapDisplay.html": {
    "href": "api/CryptoCompare.MarketCapDisplay.html",
    "title": "Class MarketCapDisplay | CryptoCompare C# client",
    "keywords": "Class MarketCapDisplay Inheritance Object ReadOnlyDictionary < String , CoinFullAggregatedDataDisplay > MarketCapDisplay Implements IDictionary < String , CoinFullAggregatedDataDisplay > ICollection < KeyValuePair < String , CoinFullAggregatedDataDisplay >> IReadOnlyDictionary < String , CoinFullAggregatedDataDisplay > IReadOnlyCollection < KeyValuePair < String , CoinFullAggregatedDataDisplay >> IEnumerable < KeyValuePair < String , CoinFullAggregatedDataDisplay >> IDictionary ICollection IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.get_Item(System.String) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.set_Item(System.String, CryptoCompare.CoinFullAggregatedDataDisplay) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.ContainsKey(String) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Add(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Contains(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.Remove(System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.Add(System.String, CryptoCompare.CoinFullAggregatedDataDisplay) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.Remove(System.String) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.ICollection.CopyTo(Array, Int32) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.Add(Object, Object) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.Clear() ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.Contains(Object) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.GetEnumerator() ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.Remove(Object) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IEnumerable.GetEnumerator() ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.TryGetValue(String, CoinFullAggregatedDataDisplay) ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.Count ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.Dictionary ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.Item[String] ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.Item[System.String] System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.Values System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedDataDisplay>.Values ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.ICollection.IsSynchronized ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.ICollection.SyncRoot ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.IsFixedSize ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.IsReadOnly ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.Item[Object] ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.Keys ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.IDictionary.Values ReadOnlyDictionary<String, CoinFullAggregatedDataDisplay>.Values Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class MarketCapDisplay : ReadOnlyDictionary<string, CoinFullAggregatedDataDisplay>, IDictionary<string, CoinFullAggregatedDataDisplay>, ICollection<KeyValuePair<string, CoinFullAggregatedDataDisplay>>, IReadOnlyDictionary<string, CoinFullAggregatedDataDisplay>, IReadOnlyCollection<KeyValuePair<string, CoinFullAggregatedDataDisplay>>, IEnumerable<KeyValuePair<string, CoinFullAggregatedDataDisplay>>, IDictionary, ICollection, IEnumerable Constructors MarketCapDisplay(IDictionary<String, CoinFullAggregatedDataDisplay>) Declaration public MarketCapDisplay(IDictionary<string, CoinFullAggregatedDataDisplay> dictionary) Parameters Type Name Description IDictionary < String , CoinFullAggregatedDataDisplay > dictionary Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/CryptoCompare.CoinAggregatedData.html": {
    "href": "api/CryptoCompare.CoinAggregatedData.html",
    "title": "Class CoinAggregatedData | CryptoCompare C# client",
    "keywords": "Class CoinAggregatedData Inheritance Object AggregatedData CoinAggregatedData CoinFullAggregatedData Inherited Members AggregatedData.Flags AggregatedData.FromSymbol AggregatedData.High24Hour AggregatedData.LastTradeId AggregatedData.LastUpdate AggregatedData.LastVolume AggregatedData.LastVolumeTo AggregatedData.Low24Hour AggregatedData.Market AggregatedData.Open24Hour AggregatedData.Price AggregatedData.ToSymbol AggregatedData.Type AggregatedData.Volume24Hour AggregatedData.Volume24HourTo Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CoinAggregatedData : AggregatedData Properties HighDay Declaration [JsonProperty(\"HIGHDAY\")] public double? HighDay { get; set; } Property Value Type Description Nullable < Double > LastMarket Declaration [JsonProperty(\"LASTMARKET\")] public string LastMarket { get; set; } Property Value Type Description String LowDay Declaration [JsonProperty(\"LOWDAY\")] public double? LowDay { get; set; } Property Value Type Description Nullable < Double > OpenDay Declaration [JsonProperty(\"OPENDAY\")] public double? OpenDay { get; set; } Property Value Type Description Nullable < Double > VolumeDay Declaration [JsonProperty(\"VOLUMEDAY\")] public double? VolumeDay { get; set; } Property Value Type Description Nullable < Double > VolumeDayTo Declaration [JsonProperty(\"VOLUMEDAYTO\")] public double? VolumeDayTo { get; set; } Property Value Type Description Nullable < Double >"
  },
  "api/CryptoCompare.TopVolume24HResponse.html": {
    "href": "api/CryptoCompare.TopVolume24HResponse.html",
    "title": "Class TopVolume24HResponse | CryptoCompare C# client",
    "keywords": "Class TopVolume24HResponse Inheritance Object BaseApiResponse TopVolume24HResponse Inherited Members BaseApiResponse.ErrorsSummary BaseApiResponse.IsSuccessfulResponse BaseApiResponse.Path BaseApiResponse.Status BaseApiResponse.StatusMessage BaseApiResponse.StatusType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class TopVolume24HResponse : BaseApiResponse Properties Data Declaration public IReadOnlyList<TopVolume24HInfo> Data { get; set; } Property Value Type Description IReadOnlyList < TopVolume24HInfo >"
  },
  "api/CryptoCompare.TopVolume24HInfo.html": {
    "href": "api/CryptoCompare.TopVolume24HInfo.html",
    "title": "Class TopVolume24HInfo | CryptoCompare C# client",
    "keywords": "Class TopVolume24HInfo Inheritance Object TopVolume24HInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class TopVolume24HInfo Properties CoinInfo Declaration public CoinInfo CoinInfo { get; set; } Property Value Type Description CoinInfo Display Declaration [JsonProperty(\"DISPLAY\")] public Volume24HDisplay Display { get; set; } Property Value Type Description Volume24HDisplay Raw Declaration [JsonProperty(\"RAW\")] public Volume24HRaw Raw { get; set; } Property Value Type Description Volume24HRaw"
  },
  "api/CryptoCompare.IApiClient.html": {
    "href": "api/CryptoCompare.IApiClient.html",
    "title": "Interface IApiClient | CryptoCompare C# client",
    "keywords": "Interface IApiClient Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public interface IApiClient Methods GetAsync<TApiResponse>(Uri) Sends an api request asynchronously usin GET method. Declaration Task<TApiResponse> GetAsync<TApiResponse>(Uri resourceUri) Parameters Type Name Description Uri resourceUri The resource uri path. Returns Type Description Task <TApiResponse> The asynchronous result that yields the asynchronous. Type Parameters Name Description TApiResponse SendRequestAsync<TApiResponse>(HttpMethod, Uri) Sends an api request asynchronously. Declaration Task<TApiResponse> SendRequestAsync<TApiResponse>(HttpMethod httpMethod, Uri resourceUri) Parameters Type Name Description HttpMethod httpMethod The HttpMethod Uri resourceUri The resource uri path Returns Type Description Task <TApiResponse> The asynchronous result that yields a TApiResponse. Type Parameters Name Description TApiResponse Type of the API response. Exceptions Type Condition CryptoCompareException Thrown when a CryptoCompare api error occurs."
  },
  "api/CryptoCompare.ExchangeListResponse.html": {
    "href": "api/CryptoCompare.ExchangeListResponse.html",
    "title": "Class ExchangeListResponse | CryptoCompare C# client",
    "keywords": "Class ExchangeListResponse Inheritance Object ReadOnlyDictionary < String , IReadOnlyDictionary < String , IReadOnlyList < String >>> ExchangeListResponse Implements IDictionary < String , IReadOnlyDictionary < String , IReadOnlyList < String >>> ICollection < KeyValuePair < String , IReadOnlyDictionary < String , IReadOnlyList < String >>>> IReadOnlyDictionary < String , IReadOnlyDictionary < String , IReadOnlyList < String >>> IReadOnlyCollection < KeyValuePair < String , IReadOnlyDictionary < String , IReadOnlyList < String >>>> IEnumerable < KeyValuePair < String , IReadOnlyDictionary < String , IReadOnlyList < String >>>> IDictionary ICollection IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.get_Item(System.String) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.set_Item(System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.ContainsKey(String) ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.Add(System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.Remove(System.String) ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.ICollection.CopyTo(Array, Int32) ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.IDictionary.Add(Object, Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.IDictionary.Clear() ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.IDictionary.Contains(Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.IDictionary.GetEnumerator() ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.IDictionary.Remove(Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.IEnumerable.GetEnumerator() ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.TryGetValue(String, IReadOnlyDictionary<String, IReadOnlyList<String>>) ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.Count ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.Dictionary ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.Item[String] ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.Item[System.String] System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.Values System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyList<System.String>>>.Values ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.ICollection.IsSynchronized ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.ICollection.SyncRoot ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.IDictionary.IsFixedSize ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.IDictionary.IsReadOnly ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.IDictionary.Item[Object] ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.IDictionary.Keys ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.IDictionary.Values ReadOnlyDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>.Values Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class ExchangeListResponse : ReadOnlyDictionary<string, IReadOnlyDictionary<string, IReadOnlyList<string>>>, IDictionary<string, IReadOnlyDictionary<string, IReadOnlyList<string>>>, ICollection<KeyValuePair<string, IReadOnlyDictionary<string, IReadOnlyList<string>>>>, IReadOnlyDictionary<string, IReadOnlyDictionary<string, IReadOnlyList<string>>>, IReadOnlyCollection<KeyValuePair<string, IReadOnlyDictionary<string, IReadOnlyList<string>>>>, IEnumerable<KeyValuePair<string, IReadOnlyDictionary<string, IReadOnlyList<string>>>>, IDictionary, ICollection, IEnumerable Constructors ExchangeListResponse(IDictionary<String, IReadOnlyDictionary<String, IReadOnlyList<String>>>) Declaration public ExchangeListResponse(IDictionary<string, IReadOnlyDictionary<string, IReadOnlyList<string>>> dictionary) Parameters Type Name Description IDictionary < String , IReadOnlyDictionary < String , IReadOnlyList < String >>> dictionary Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/CryptoCompare.CodeRepository.html": {
    "href": "api/CryptoCompare.CodeRepository.html",
    "title": "Class CodeRepository | CryptoCompare C# client",
    "keywords": "Class CodeRepository Inheritance Object CodeRepository Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CodeRepository Properties Points Declaration [JsonProperty(\"Points\")] public long Points { get; set; } Property Value Type Description Int64 Repositories Declaration [JsonProperty(\"List\")] public Repository[] Repositories { get; set; } Property Value Type Description Repository []"
  },
  "api/CryptoCompare.ICoinsClient.html": {
    "href": "api/CryptoCompare.ICoinsClient.html",
    "title": "Interface ICoinsClient | CryptoCompare C# client",
    "keywords": "Interface ICoinsClient Coins api client. Gets general info for all the coins available on the website. Inherited Members IApiClient.GetAsync<TApiResponse>(Uri) IApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public interface ICoinsClient : IApiClient Methods ListAsync() Returns all the coins that CryptoCompare has added to the website. Declaration Task<CoinListResponse> ListAsync() Returns Type Description Task < CoinListResponse > SnapshotAsync(String, String) Gets data for a currency pair. It returns general block explorer information, aggregated data and individual data for each exchange available. Declaration Task<CoinSnapshotResponse> SnapshotAsync(string fromSymbol, string toSymbol) Parameters Type Name Description String fromSymbol The symbol of the currency you want to get that for. String toSymbol The symbol of the currency that data will be in. Returns Type Description Task < CoinSnapshotResponse > SnapshotFullAsync(Int32) Get the general, subs (used to connect to the streamer and to figure out what exchanges we have data for and what are the exact coin pairs of the coin) and the aggregated prices for all pairs available.. Declaration Task<CoinSnapshotFullResponse> SnapshotFullAsync(int id) Parameters Type Name Description Int32 id The id of the coin you want data for. Returns Type Description Task < CoinSnapshotFullResponse > The asynchronous result that yields a full CoinSnapshot."
  },
  "api/CryptoCompare.PriceMultiFullResponse.html": {
    "href": "api/CryptoCompare.PriceMultiFullResponse.html",
    "title": "Class PriceMultiFullResponse | CryptoCompare C# client",
    "keywords": "Class PriceMultiFullResponse Inheritance Object PriceMultiFullResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class PriceMultiFullResponse Properties Display Declaration [JsonProperty(\"DISPLAY\")] public PriceMultiFullDisplay Display { get; set; } Property Value Type Description PriceMultiFullDisplay Raw Declaration [JsonProperty(\"RAW\")] public PriceMultiFullRaw Raw { get; set; } Property Value Type Description PriceMultiFullRaw"
  },
  "api/CryptoCompare.CoinListResponse.html": {
    "href": "api/CryptoCompare.CoinListResponse.html",
    "title": "Class CoinListResponse | CryptoCompare C# client",
    "keywords": "Class CoinListResponse List of coins. Inheritance Object BaseApiResponse CoinListResponse Inherited Members BaseApiResponse.ErrorsSummary BaseApiResponse.IsSuccessfulResponse BaseApiResponse.Path BaseApiResponse.Status BaseApiResponse.StatusMessage BaseApiResponse.StatusType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CoinListResponse : BaseApiResponse Properties BaseImageUrl Declaration public string BaseImageUrl { get; set; } Property Value Type Description String BaseLinkUrl Declaration public string BaseLinkUrl { get; set; } Property Value Type Description String Coins Gets or sets the coins data. Declaration [JsonProperty(\"Data\")] public IReadOnlyDictionary<string, CoinInfo> Coins { get; set; } Property Value Type Description IReadOnlyDictionary < String , CoinInfo > See Also CryptoCompare.Responses.BaseApiResponse"
  },
  "api/CryptoCompare.PriceClient.html": {
    "href": "api/CryptoCompare.PriceClient.html",
    "title": "Class PriceClient | CryptoCompare C# client",
    "keywords": "Class PriceClient Inheritance Object BaseApiClient PriceClient Implements IPricesClient IApiClient Inherited Members BaseApiClient.GetAsync<TApiResponse>(Uri) BaseApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class PriceClient : BaseApiClient, IPricesClient, IApiClient Constructors PriceClient(HttpClient) Initializes a new instance of the CryptoCompare.PriceClient class. Declaration public PriceClient(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The HTTP client. This cannot be null. Methods GenerateCustomAverageAsync(String, String, IEnumerable<String>, Nullable<Boolean>) Compute the current trading info (price, vol, open, high, low etc) of the requested pair as a volume weighted average based on the exchanges requested. Declaration public Task<PriceAverageResponse> GenerateCustomAverageAsync(string fromSymbol, string toSymbol, IEnumerable<string> markets, bool? tryConversion = default(bool? )) Parameters Type Name Description String fromSymbol from symbol. String toSymbol to symbol. IEnumerable < String > markets List of names of the exchanges. Nullable < Boolean > tryConversion (Optional) If set to false, it will try to get values without using any conversion at all (defaultVal:true) Returns Type Description Task < PriceAverageResponse > An asynchronous result that yields the average. MultipleSymbolFullDataAsync(IEnumerable<String>, IEnumerable<String>, Nullable<Boolean>, String) Get all the current trading info (price, vol, open, high, low etc) of any list of cryptocurrencies in any other currency that you need. If the crypto does not trade directly into the toSymbol requested, BTC will be used for conversion. This API also returns Display values for all the fields. If the oposite pair trades we invert it (eg.: BTC-XMR). Declaration public Task<PriceMultiFullResponse> MultipleSymbolFullDataAsync(IEnumerable<string> fromSymbols, IEnumerable<string> toSymbols, bool? tryConversion = default(bool? ), string exchangeName = null) Parameters Type Name Description IEnumerable < String > fromSymbols from symbols. IEnumerable < String > toSymbols to symbols. Nullable < Boolean > tryConversion (Optional) If set to false, it will try to get values without using any conversion at all (defaultVal:true) String exchangeName (Optional) Exchange name default => CCCAGG. Returns Type Description Task < PriceMultiFullResponse > An asynchronous result that yields the multi full. MultipleSymbolsPriceAsync(IEnumerable<String>, IEnumerable<String>, Nullable<Boolean>, String) Same as single API path but with multiple from symbols. Declaration public Task<PriceMultiResponse> MultipleSymbolsPriceAsync(IEnumerable<string> fromSymbols, IEnumerable<string> toSymbols, bool? tryConversion = default(bool? ), string exchangeName = null) Parameters Type Name Description IEnumerable < String > fromSymbols from symbols. IEnumerable < String > toSymbols to symbols. Nullable < Boolean > tryConversion (Optional) If set to false, it will try to get values without using any conversion at all (defaultVal:true) String exchangeName (Optional) Exchange name defult => CCCAGG. Returns Type Description Task < PriceMultiResponse > SingleSymbolPriceAsync(String, IEnumerable<String>, Nullable<Boolean>, String) Get the current price of any cryptocurrency in any other currency that you need. If the crypto does not trade directly into the toSymbol requested, BTC will be used for conversion. If the oposite pair trades we invert it (eg.: BTC-XMR). Declaration public Task<PriceSingleResponse> SingleSymbolPriceAsync(string fromSymbol, IEnumerable<string> toSymbols, bool? tryConversion = default(bool? ), string exchangeName = null) Parameters Type Name Description String fromSymbol from symbol. IEnumerable < String > toSymbols to symbols. Nullable < Boolean > tryConversion String exchangeName Exchange name default = CCC Returns Type Description Task < PriceSingleResponse > See Also CryptoCompare.Clients.IPricesClient.Single(string,IEnumerable{string}) Implements IPricesClient IApiClient"
  },
  "api/CryptoCompare.MiningData.html": {
    "href": "api/CryptoCompare.MiningData.html",
    "title": "Class MiningData | CryptoCompare C# client",
    "keywords": "Class MiningData Inheritance Object MiningData MiningContract MiningEquipment Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class MiningData Properties AffiliateUrl Declaration public string AffiliateUrl { get; set; } Property Value Type Description String Algorithm Declaration public string Algorithm { get; set; } Property Value Type Description String Company Declaration public string Company { get; set; } Property Value Type Description String Cost Declaration public double Cost { get; set; } Property Value Type Description Double CurrenciesAvailable Declaration public string CurrenciesAvailable { get; set; } Property Value Type Description String CurrenciesAvailableLogo Declaration public string CurrenciesAvailableLogo { get; set; } Property Value Type Description String CurrenciesAvailableName Declaration public string CurrenciesAvailableName { get; set; } Property Value Type Description String Currency Declaration public string Currency { get; set; } Property Value Type Description String HashesPerSecond Declaration public string HashesPerSecond { get; set; } Property Value Type Description String Id Declaration public string Id { get; set; } Property Value Type Description String LogoUrl Declaration public string LogoUrl { get; set; } Property Value Type Description String Name Declaration public string Name { get; set; } Property Value Type Description String ParentId Declaration public string ParentId { get; set; } Property Value Type Description String Recommended Declaration public bool Recommended { get; set; } Property Value Type Description Boolean Sponsored Declaration public bool Sponsored { get; set; } Property Value Type Description Boolean Url Declaration public string Url { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.ITopListClient.html": {
    "href": "api/CryptoCompare.ITopListClient.html",
    "title": "Interface ITopListClient | CryptoCompare C# client",
    "keywords": "Interface ITopListClient Inherited Members IApiClient.GetAsync<TApiResponse>(Uri) IApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public interface ITopListClient : IApiClient Methods ByPairVolumeAsync(String, Nullable<Int32>) Get top coins by volume for the to currency. It returns volume24hto and total supply (where available). The number of coins you get is the minimum of the limit you set (default 50) and the total number of coins available. Declaration Task<TopVolumesResponse> ByPairVolumeAsync(string toSymbol, int? limit = default(int? )) Parameters Type Name Description String toSymbol to symbol. Nullable < Int32 > limit (Optional) The limit. Returns Type Description Task < TopVolumesResponse > An asynchronous result that yields a TopVolumesResponse. CoinFullDataBy24HVolume(String, Nullable<Int32>, Nullable<Int32>, Nullable<Boolean>) Get full data for the top coins ordered by their total volume across all markets in the last 24 hours as expressed in a given currency. Declaration Task<TopVolume24HResponse> CoinFullDataBy24HVolume(string toSymbol, int? limit = default(int? ), int? page = default(int? ), bool? sign = default(bool? )) Parameters Type Name Description String toSymbol The symbol of the currency into which the market cap are expressed. Nullable < Int32 > limit (Optional)The number currencies to return, default is 10. Nullable < Int32 > page (Optional)The pagination for the request. Nullable < Boolean > sign (Optional)If set to true, the server will sign the requests, this is useful for usage in smart contracts. Returns Type Description Task < TopVolume24HResponse > The asynchronous result that yields a TopVolume24HResponse. CoinFullDataByMarketCap(String, Nullable<Int32>, Nullable<Int32>, Nullable<Boolean>) Get top coins by market cap expressed in a given currency. Declaration Task<TopMarketCapResponse> CoinFullDataByMarketCap(string toSymbol, int? limit = default(int? ), int? page = default(int? ), bool? sign = default(bool? )) Parameters Type Name Description String toSymbol The symbol of the currency into which the market cap are expressed. Nullable < Int32 > limit (Optional)The number currencies to return, default is 10. Nullable < Int32 > page (Optional)The pagination for the request. Nullable < Boolean > sign (Optional)If set to true, the server will sign the requests, this is useful for usage in smart contracts. Returns Type Description Task < TopMarketCapResponse > The asynchronous result that yields a TopMarketCapResponse. ExchangesFullDataByPairAsync(String, String, Nullable<Int32>) Get top exchanges by volume for a currency pair plus the full CCCAGG data. The number of exchanges you get is the minimum of the limit you set (default 5) and the total number of exchanges available. Declaration Task<TopExchangeFullResponse> ExchangesFullDataByPairAsync(string fromSymbol, string toSymbol, int? limit = default(int? )) Parameters Type Name Description String fromSymbol The cryptocurrency symbol of interest String toSymbol The currency symbol to convert into Nullable < Int32 > limit (Optional)The number of data points to return. Returns Type Description Task < TopExchangeFullResponse > ExchangesVolumeDataByPairAsync(String, String, Nullable<Int32>) Get top exchanges by volume for a currency pair. The number of exchanges you get is the minimum of the limit you set (default 5) and the total number of exchanges available. Declaration Task<TopResponse> ExchangesVolumeDataByPairAsync(string fromSymbol, string toSymbol, int? limit = default(int? )) Parameters Type Name Description String fromSymbol from symbol. String toSymbol to symbol. Nullable < Int32 > limit (Optional) The limit. Returns Type Description Task < TopResponse > An asynchronous result that yields a TopResponse. TradingPairsAsync(String, Nullable<Int32>) Get top pairs by volume for a currency (always uses our aggregated data). The number of pairs you get is the minimum of the limit you set (default 5) and the total number of pairs available. Declaration Task<TopResponse> TradingPairsAsync(string fromSymbol, int? limit = default(int? )) Parameters Type Name Description String fromSymbol from symbol. Nullable < Int32 > limit (Optional) The limit. Returns Type Description Task < TopResponse > An asynchronous result that yields a TopResponse."
  },
  "api/CryptoCompare.CryptoCompareException.html": {
    "href": "api/CryptoCompare.CryptoCompareException.html",
    "title": "Class CryptoCompareException | CryptoCompare C# client",
    "keywords": "Class CryptoCompareException Global Exception for signalling cryptocompare api errors. Inheritance Object Exception HttpRequestException CryptoCompareException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CryptoCompareException : HttpRequestException, ISerializable Constructors CryptoCompareException(BaseApiResponse) Initializes a new instance of the CryptoCompare.Exceptions.CryptoCompareException class. Declaration public CryptoCompareException(BaseApiResponse apiResponse) Parameters Type Name Description BaseApiResponse apiResponse Reason of api failure. CryptoCompareException(BaseApiResponse, Exception) Initializes a new instance of the CryptoCompare.Exceptions.CryptoCompareException class. Declaration public CryptoCompareException(BaseApiResponse apiResponse, Exception innerException) Parameters Type Name Description BaseApiResponse apiResponse Reason of api failure. Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable See Also Exception"
  },
  "api/CryptoCompare.SocialStats.html": {
    "href": "api/CryptoCompare.SocialStats.html",
    "title": "Class SocialStats | CryptoCompare C# client",
    "keywords": "Class SocialStats Inheritance Object SocialStats Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class SocialStats Properties CodeRepository Declaration [JsonProperty(\"CodeRepository\")] public CodeRepository CodeRepository { get; set; } Property Value Type Description CodeRepository CryptoCompare Declaration [JsonProperty(\"CryptoCompare\")] public CryptoCompare CryptoCompare { get; set; } Property Value Type Description CryptoCompare Facebook Declaration [JsonProperty(\"Facebook\")] public Facebook Facebook { get; set; } Property Value Type Description Facebook General Declaration [JsonProperty(\"General\")] public General General { get; set; } Property Value Type Description General Reddit Declaration [JsonProperty(\"Reddit\")] public Reddit Reddit { get; set; } Property Value Type Description Reddit Twitter Declaration [JsonProperty(\"Twitter\")] public Twitter Twitter { get; set; } Property Value Type Description Twitter"
  },
  "api/CryptoCompare.IsoDateTimeWithFormatConverter.html": {
    "href": "api/CryptoCompare.IsoDateTimeWithFormatConverter.html",
    "title": "Class IsoDateTimeWithFormatConverter | CryptoCompare C# client",
    "keywords": "Class IsoDateTimeWithFormatConverter Inheritance Object Newtonsoft.Json.JsonConverter Newtonsoft.Json.Converters.DateTimeConverterBase Newtonsoft.Json.Converters.IsoDateTimeConverter IsoDateTimeWithFormatConverter Inherited Members Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer) Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type) Newtonsoft.Json.JsonConverter.CanRead Newtonsoft.Json.JsonConverter.CanWrite Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class IsoDateTimeWithFormatConverter : IsoDateTimeConverter Constructors IsoDateTimeWithFormatConverter(String) Declaration public IsoDateTimeWithFormatConverter(string format) Parameters Type Name Description String format"
  },
  "api/CryptoCompare.PriceMultiFullRaw.html": {
    "href": "api/CryptoCompare.PriceMultiFullRaw.html",
    "title": "Class PriceMultiFullRaw | CryptoCompare C# client",
    "keywords": "Class PriceMultiFullRaw Inheritance Object ReadOnlyDictionary < String , IReadOnlyDictionary < String , CoinFullAggregatedData >> PriceMultiFullRaw Implements IDictionary < String , IReadOnlyDictionary < String , CoinFullAggregatedData >> ICollection < KeyValuePair < String , IReadOnlyDictionary < String , CoinFullAggregatedData >>> IReadOnlyDictionary < String , IReadOnlyDictionary < String , CoinFullAggregatedData >> IReadOnlyCollection < KeyValuePair < String , IReadOnlyDictionary < String , CoinFullAggregatedData >>> IEnumerable < KeyValuePair < String , IReadOnlyDictionary < String , CoinFullAggregatedData >>> IDictionary ICollection IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.get_Item(System.String) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.set_Item(System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.ContainsKey(String) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.Add(System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.Remove(System.String) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.ICollection.CopyTo(Array, Int32) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.IDictionary.Add(Object, Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.IDictionary.Clear() ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.IDictionary.Contains(Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.IDictionary.GetEnumerator() ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.IDictionary.Remove(Object) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.IEnumerable.GetEnumerator() ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.TryGetValue(String, IReadOnlyDictionary<String, CoinFullAggregatedData>) ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.Count ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.Dictionary ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.Item[String] ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.Item[System.String] System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.Values System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, CryptoCompare.CoinFullAggregatedData>>.Values ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.ICollection.IsSynchronized ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.ICollection.SyncRoot ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.IDictionary.IsFixedSize ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.IDictionary.IsReadOnly ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.IDictionary.Item[Object] ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.IDictionary.Keys ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.IDictionary.Values ReadOnlyDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>.Values Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class PriceMultiFullRaw : ReadOnlyDictionary<string, IReadOnlyDictionary<string, CoinFullAggregatedData>>, IDictionary<string, IReadOnlyDictionary<string, CoinFullAggregatedData>>, ICollection<KeyValuePair<string, IReadOnlyDictionary<string, CoinFullAggregatedData>>>, IReadOnlyDictionary<string, IReadOnlyDictionary<string, CoinFullAggregatedData>>, IReadOnlyCollection<KeyValuePair<string, IReadOnlyDictionary<string, CoinFullAggregatedData>>>, IEnumerable<KeyValuePair<string, IReadOnlyDictionary<string, CoinFullAggregatedData>>>, IDictionary, ICollection, IEnumerable Constructors PriceMultiFullRaw(IDictionary<String, IReadOnlyDictionary<String, CoinFullAggregatedData>>) Declaration public PriceMultiFullRaw(IDictionary<string, IReadOnlyDictionary<string, CoinFullAggregatedData>> dictionary) Parameters Type Name Description IDictionary < String , IReadOnlyDictionary < String , CoinFullAggregatedData >> dictionary Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/CryptoCompare.MiningEquipmentsResponse.html": {
    "href": "api/CryptoCompare.MiningEquipmentsResponse.html",
    "title": "Class MiningEquipmentsResponse | CryptoCompare C# client",
    "keywords": "Class MiningEquipmentsResponse Inheritance Object BaseApiResponse MiningEquipmentsResponse Inherited Members BaseApiResponse.ErrorsSummary BaseApiResponse.IsSuccessfulResponse BaseApiResponse.Path BaseApiResponse.Status BaseApiResponse.StatusMessage BaseApiResponse.StatusType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class MiningEquipmentsResponse : BaseApiResponse Properties MiningData Declaration public IReadOnlyDictionary<string, MiningEquipment> MiningData { get; set; } Property Value Type Description IReadOnlyDictionary < String , MiningEquipment >"
  },
  "api/CryptoCompare.MiningContractsResponse.html": {
    "href": "api/CryptoCompare.MiningContractsResponse.html",
    "title": "Class MiningContractsResponse | CryptoCompare C# client",
    "keywords": "Class MiningContractsResponse Inheritance Object BaseApiResponse MiningContractsResponse Inherited Members BaseApiResponse.ErrorsSummary BaseApiResponse.IsSuccessfulResponse BaseApiResponse.Path BaseApiResponse.Status BaseApiResponse.StatusMessage BaseApiResponse.StatusType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class MiningContractsResponse : BaseApiResponse Properties MiningData Declaration public IReadOnlyDictionary<string, MiningContract> MiningData { get; set; } Property Value Type Description IReadOnlyDictionary < String , MiningContract >"
  },
  "api/CryptoCompare.TopMarketCapResponse.html": {
    "href": "api/CryptoCompare.TopMarketCapResponse.html",
    "title": "Class TopMarketCapResponse | CryptoCompare C# client",
    "keywords": "Class TopMarketCapResponse Inheritance Object BaseApiResponse TopMarketCapResponse Inherited Members BaseApiResponse.ErrorsSummary BaseApiResponse.IsSuccessfulResponse BaseApiResponse.Path BaseApiResponse.Status BaseApiResponse.StatusMessage BaseApiResponse.StatusType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class TopMarketCapResponse : BaseApiResponse Properties Data Declaration public IReadOnlyList<TopMarketCapInfo> Data { get; set; } Property Value Type Description IReadOnlyList < TopMarketCapInfo >"
  },
  "api/CryptoCompare.TopMarketCapInfo.html": {
    "href": "api/CryptoCompare.TopMarketCapInfo.html",
    "title": "Class TopMarketCapInfo | CryptoCompare C# client",
    "keywords": "Class TopMarketCapInfo Inheritance Object TopMarketCapInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class TopMarketCapInfo Properties CoinInfo Declaration public CoinInfo CoinInfo { get; set; } Property Value Type Description CoinInfo Display Declaration [JsonProperty(\"DISPLAY\")] public MarketCapDisplay Display { get; set; } Property Value Type Description MarketCapDisplay Raw Declaration [JsonProperty(\"RAW\")] public MarketCapRaw Raw { get; set; } Property Value Type Description MarketCapRaw"
  },
  "api/CryptoCompare.SocialStatsResponse.html": {
    "href": "api/CryptoCompare.SocialStatsResponse.html",
    "title": "Class SocialStatsResponse | CryptoCompare C# client",
    "keywords": "Class SocialStatsResponse Inheritance Object SocialStatsResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class SocialStatsResponse Properties Message Declaration [JsonProperty(\"Message\")] public string Message { get; set; } Property Value Type Description String Response Declaration [JsonProperty(\"Response\")] public string Response { get; set; } Property Value Type Description String SocialStats Declaration [JsonProperty(\"Data\")] public SocialStats SocialStats { get; set; } Property Value Type Description SocialStats Type Declaration [JsonProperty(\"Type\")] public long Type { get; set; } Property Value Type Description Int64"
  },
  "api/CryptoCompare.RateLimitResponse.html": {
    "href": "api/CryptoCompare.RateLimitResponse.html",
    "title": "Class RateLimitResponse | CryptoCompare C# client",
    "keywords": "Class RateLimitResponse A rate limit. Inheritance Object BaseApiResponse RateLimitResponse Inherited Members BaseApiResponse.ErrorsSummary BaseApiResponse.IsSuccessfulResponse BaseApiResponse.Path BaseApiResponse.Status BaseApiResponse.StatusMessage BaseApiResponse.StatusType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class RateLimitResponse : BaseApiResponse Properties CallsLeft Gets or sets the calls left. Declaration public Calls CallsLeft { get; set; } Property Value Type Description Calls CallsMade Gets or sets the calls made. Declaration public Calls CallsMade { get; set; } Property Value Type Description Calls See Also CryptoCompare.Responses.BaseApiResponse"
  },
  "api/CryptoCompare.PageViewsSplit.html": {
    "href": "api/CryptoCompare.PageViewsSplit.html",
    "title": "Class PageViewsSplit | CryptoCompare C# client",
    "keywords": "Class PageViewsSplit Inheritance Object PageViewsSplit Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class PageViewsSplit Properties Analysis Declaration [JsonProperty(\"Analysis\")] public long Analysis { get; set; } Property Value Type Description Int64 Charts Declaration [JsonProperty(\"Charts\")] public long Charts { get; set; } Property Value Type Description Int64 Forum Declaration [JsonProperty(\"Forum\")] public long Forum { get; set; } Property Value Type Description Int64 Influence Declaration [JsonProperty(\"Influence\")] public long Influence { get; set; } Property Value Type Description Int64 Markets Declaration [JsonProperty(\"Markets\")] public long Markets { get; set; } Property Value Type Description Int64 Orderbook Declaration [JsonProperty(\"Orderbook\")] public long Orderbook { get; set; } Property Value Type Description Int64 Overview Declaration [JsonProperty(\"Overview\")] public long Overview { get; set; } Property Value Type Description Int64 Trades Declaration [JsonProperty(\"Trades\")] public long Trades { get; set; } Property Value Type Description Int64"
  },
  "api/CryptoCompare.NewsProvider.html": {
    "href": "api/CryptoCompare.NewsProvider.html",
    "title": "Class NewsProvider | CryptoCompare C# client",
    "keywords": "Class NewsProvider Inheritance Object NewsProvider Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class NewsProvider Properties ImageUrl Declaration [JsonProperty(\"img\")] public string ImageUrl { get; set; } Property Value Type Description String Key Declaration [JsonProperty(\"key\")] public string Key { get; set; } Property Value Type Description String Lang Declaration [JsonProperty(\"lang\")] public string Lang { get; set; } Property Value Type Description String Name Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.TopResponse.html": {
    "href": "api/CryptoCompare.TopResponse.html",
    "title": "Class TopResponse | CryptoCompare C# client",
    "keywords": "Class TopResponse Inheritance Object BaseApiResponse TopResponse Inherited Members BaseApiResponse.ErrorsSummary BaseApiResponse.IsSuccessfulResponse BaseApiResponse.Path BaseApiResponse.Status BaseApiResponse.StatusMessage BaseApiResponse.StatusType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class TopResponse : BaseApiResponse Properties Data Declaration public IReadOnlyList<TopInfo> Data { get; set; } Property Value Type Description IReadOnlyList < TopInfo >"
  },
  "api/CryptoCompare.TopExchangeInfo.html": {
    "href": "api/CryptoCompare.TopExchangeInfo.html",
    "title": "Class TopExchangeInfo | CryptoCompare C# client",
    "keywords": "Class TopExchangeInfo Inheritance Object TopExchangeInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class TopExchangeInfo Properties AggregatedData Declaration public AggregatedData AggregatedData { get; set; } Property Value Type Description AggregatedData CoinInfo Declaration public CoinInfo CoinInfo { get; set; } Property Value Type Description CoinInfo Exchanges Declaration public IEnumerable<CoinFullAggregatedDataDisplay> Exchanges { get; set; } Property Value Type Description IEnumerable < CoinFullAggregatedDataDisplay >"
  },
  "api/CryptoCompare.SocialStatsClient.html": {
    "href": "api/CryptoCompare.SocialStatsClient.html",
    "title": "Class SocialStatsClient | CryptoCompare C# client",
    "keywords": "Class SocialStatsClient Inheritance Object BaseApiClient SocialStatsClient Implements IApiClient ISocialStatsClient Inherited Members BaseApiClient.GetAsync<TApiResponse>(Uri) BaseApiClient.SendRequestAsync<TApiResponse>(HttpMethod, Uri) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class SocialStatsClient : BaseApiClient, IApiClient, ISocialStatsClient Constructors SocialStatsClient(HttpClient) Initializes a new instance of the CryptoCompare.SocialClient class. Declaration public SocialStatsClient(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The HTTP client. This cannot be null. Methods StatsAsync(Int32) Get all the available social stats for a coin. Declaration public Task<SocialStatsResponse> StatsAsync(int id) Parameters Type Name Description Int32 id coin id. Returns Type Description Task < SocialStatsResponse > An asynchronous result that yields an object containing the social stats. Implements IApiClient ISocialStatsClient"
  },
  "api/CryptoCompare.SEO.html": {
    "href": "api/CryptoCompare.SEO.html",
    "title": "Class SEO | CryptoCompare C# client",
    "keywords": "Class SEO Inheritance Object SEO Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class SEO Properties BaseImageUrl Declaration public string BaseImageUrl { get; set; } Property Value Type Description String BaseUrl Declaration public string BaseUrl { get; set; } Property Value Type Description String OgImageHeight Declaration public int OgImageHeight { get; set; } Property Value Type Description Int32 OgImageUrl Declaration public string OgImageUrl { get; set; } Property Value Type Description String OgImageWidth Declaration public int OgImageWidth { get; set; } Property Value Type Description Int32 PageDescription Declaration public string PageDescription { get; set; } Property Value Type Description String PageTitle Declaration public string PageTitle { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.CoinFullAggregatedData.html": {
    "href": "api/CryptoCompare.CoinFullAggregatedData.html",
    "title": "Class CoinFullAggregatedData | CryptoCompare C# client",
    "keywords": "Class CoinFullAggregatedData Inheritance Object AggregatedData CoinAggregatedData CoinFullAggregatedData Inherited Members CoinAggregatedData.HighDay CoinAggregatedData.LastMarket CoinAggregatedData.LowDay CoinAggregatedData.OpenDay CoinAggregatedData.VolumeDay CoinAggregatedData.VolumeDayTo AggregatedData.Flags AggregatedData.FromSymbol AggregatedData.High24Hour AggregatedData.LastTradeId AggregatedData.LastUpdate AggregatedData.LastVolume AggregatedData.LastVolumeTo AggregatedData.Low24Hour AggregatedData.Market AggregatedData.Open24Hour AggregatedData.Price AggregatedData.ToSymbol AggregatedData.Type AggregatedData.Volume24Hour AggregatedData.Volume24HourTo Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CoinFullAggregatedData : CoinAggregatedData Properties Change24Hour Declaration [JsonProperty(\"CHANGE24HOUR\")] public decimal? Change24Hour { get; set; } Property Value Type Description Nullable < Decimal > ChangeDay Declaration [JsonProperty(\"CHANGEDAY\")] public decimal? ChangeDay { get; set; } Property Value Type Description Nullable < Decimal > ChangePCT24Hour Declaration [JsonProperty(\"CHANGEPCT24HOUR\")] public decimal? ChangePCT24Hour { get; set; } Property Value Type Description Nullable < Decimal > ChangePCTDay Declaration [JsonProperty(\"CHANGEPCTDAY\")] public decimal? ChangePCTDay { get; set; } Property Value Type Description Nullable < Decimal > MarketCap Declaration [JsonProperty(\"MKTCAP\")] public decimal? MarketCap { get; set; } Property Value Type Description Nullable < Decimal > TotalVolume24H Declaration [JsonProperty(\"TOTALVOLUME24H\")] public decimal? TotalVolume24H { get; set; } Property Value Type Description Nullable < Decimal > TotalVolume24HTo Declaration [JsonProperty(\"TOTALVOLUME24HTO\")] public decimal? TotalVolume24HTo { get; set; } Property Value Type Description Nullable < Decimal >"
  },
  "api/CryptoCompare.CalculationType.html": {
    "href": "api/CryptoCompare.CalculationType.html",
    "title": "Enum CalculationType | CryptoCompare C# client",
    "keywords": "Enum CalculationType Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public enum CalculationType Fields Name Description Close The day close price. HourVWAP HourVWAP of hourly price MidHighLow The average between the 24 H high and low. VolFVolT The total volume to / the total volume from."
  },
  "api/CryptoCompare.PriceSingleResponse.html": {
    "href": "api/CryptoCompare.PriceSingleResponse.html",
    "title": "Class PriceSingleResponse | CryptoCompare C# client",
    "keywords": "Class PriceSingleResponse Inheritance Object ReadOnlyDictionary < String , Decimal > PriceSingleResponse Implements IDictionary < String , Decimal > ICollection < KeyValuePair < String , Decimal >> IReadOnlyDictionary < String , Decimal > IReadOnlyCollection < KeyValuePair < String , Decimal >> IEnumerable < KeyValuePair < String , Decimal >> IDictionary ICollection IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.IDictionary<System.String, System.Decimal>.get_Item(System.String) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.IDictionary<System.String, System.Decimal>.set_Item(System.String, System.Decimal) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ReadOnlyDictionary<String, Decimal>.ContainsKey(String) ReadOnlyDictionary<String, Decimal>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Decimal>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Decimal>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Decimal>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Decimal>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Decimal>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Decimal>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Decimal>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Decimal>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Decimal>) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.IDictionary<System.String, System.Decimal>.Add(System.String, System.Decimal) System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.IDictionary<System.String, System.Decimal>.Remove(System.String) ReadOnlyDictionary<String, Decimal>.ICollection.CopyTo(Array, Int32) ReadOnlyDictionary<String, Decimal>.IDictionary.Add(Object, Object) ReadOnlyDictionary<String, Decimal>.IDictionary.Clear() ReadOnlyDictionary<String, Decimal>.IDictionary.Contains(Object) ReadOnlyDictionary<String, Decimal>.IDictionary.GetEnumerator() ReadOnlyDictionary<String, Decimal>.IDictionary.Remove(Object) ReadOnlyDictionary<String, Decimal>.IEnumerable.GetEnumerator() ReadOnlyDictionary<String, Decimal>.TryGetValue(String, Decimal) ReadOnlyDictionary<String, Decimal>.Count ReadOnlyDictionary<String, Decimal>.Dictionary ReadOnlyDictionary<String, Decimal>.Item[String] ReadOnlyDictionary<String, Decimal>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Decimal>>.IsReadOnly System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.IDictionary<System.String, System.Decimal>.Item[System.String] System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.IDictionary<System.String, System.Decimal>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.IDictionary<System.String, System.Decimal>.Values System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Decimal>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Decimal>.Values ReadOnlyDictionary<String, Decimal>.ICollection.IsSynchronized ReadOnlyDictionary<String, Decimal>.ICollection.SyncRoot ReadOnlyDictionary<String, Decimal>.IDictionary.IsFixedSize ReadOnlyDictionary<String, Decimal>.IDictionary.IsReadOnly ReadOnlyDictionary<String, Decimal>.IDictionary.Item[Object] ReadOnlyDictionary<String, Decimal>.IDictionary.Keys ReadOnlyDictionary<String, Decimal>.IDictionary.Values ReadOnlyDictionary<String, Decimal>.Values Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class PriceSingleResponse : ReadOnlyDictionary<string, decimal>, IDictionary<string, decimal>, ICollection<KeyValuePair<string, decimal>>, IReadOnlyDictionary<string, decimal>, IReadOnlyCollection<KeyValuePair<string, decimal>>, IEnumerable<KeyValuePair<string, decimal>>, IDictionary, ICollection, IEnumerable Constructors PriceSingleResponse(IDictionary<String, Decimal>) Declaration public PriceSingleResponse(IDictionary<string, decimal> dictionary) Parameters Type Name Description IDictionary < String , Decimal > dictionary Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/CryptoCompare.PriceAverageResponse.html": {
    "href": "api/CryptoCompare.PriceAverageResponse.html",
    "title": "Class PriceAverageResponse | CryptoCompare C# client",
    "keywords": "Class PriceAverageResponse Inheritance Object PriceAverageResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class PriceAverageResponse Properties Display Declaration [JsonProperty(\"DISPLAY\")] public CoinFullAggregatedDataDisplay Display { get; set; } Property Value Type Description CoinFullAggregatedDataDisplay Raw Declaration [JsonProperty(\"RAW\")] public CoinFullAggregatedData Raw { get; set; } Property Value Type Description CoinFullAggregatedData"
  },
  "api/CryptoCompare.General.html": {
    "href": "api/CryptoCompare.General.html",
    "title": "Class General | CryptoCompare C# client",
    "keywords": "Class General Inheritance Object General Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class General Properties CoinName Declaration [JsonProperty(\"CoinName\")] public string CoinName { get; set; } Property Value Type Description String Name Declaration [JsonProperty(\"Name\")] public string Name { get; set; } Property Value Type Description String Points Declaration [JsonProperty(\"Points\")] public long Points { get; set; } Property Value Type Description Int64 Type Declaration [JsonProperty(\"Type\")] public string Type { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.CoinFullAggregatedDataDisplay.html": {
    "href": "api/CryptoCompare.CoinFullAggregatedDataDisplay.html",
    "title": "Class CoinFullAggregatedDataDisplay | CryptoCompare C# client",
    "keywords": "Class CoinFullAggregatedDataDisplay Inheritance Object CoinFullAggregatedDataDisplay Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class CoinFullAggregatedDataDisplay Properties Change24Hour Declaration [JsonProperty(\"CHANGE24HOUR\")] public string Change24Hour { get; set; } Property Value Type Description String ChangeDay Declaration [JsonProperty(\"CHANGEDAY\")] public string ChangeDay { get; set; } Property Value Type Description String ChangePCT24Hour Declaration [JsonProperty(\"CHANGEPCT24HOUR\")] public string ChangePCT24Hour { get; set; } Property Value Type Description String ChangePCTDay Declaration [JsonProperty(\"CHANGEPCTDAY\")] public string ChangePCTDay { get; set; } Property Value Type Description String FromSymbol Declaration [JsonProperty(\"FROMSYMBOL\")] public string FromSymbol { get; set; } Property Value Type Description String High24Hour Declaration [JsonProperty(\"HIGH24HOUR\")] public string High24Hour { get; set; } Property Value Type Description String HighDay Declaration [JsonProperty(\"HIGHDAY\")] public string HighDay { get; set; } Property Value Type Description String LastMarket Declaration [JsonProperty(\"LASTMARKET\")] public string LastMarket { get; set; } Property Value Type Description String LastTradeId Declaration [JsonProperty(\"LASTTRADEID\")] public string LastTradeId { get; set; } Property Value Type Description String LastUpdate Declaration [JsonProperty(\"LASTUPDATE\")] public string LastUpdate { get; set; } Property Value Type Description String LastVolume Declaration [JsonProperty(\"LASTVOLUME\")] public string LastVolume { get; set; } Property Value Type Description String LastVolumeTo Declaration [JsonProperty(\"LASTVOLUMETO\")] public string LastVolumeTo { get; set; } Property Value Type Description String Low24Hour Declaration [JsonProperty(\"LOW24HOUR\")] public string Low24Hour { get; set; } Property Value Type Description String LowDay Declaration [JsonProperty(\"LOWDAY\")] public string LowDay { get; set; } Property Value Type Description String Market Declaration [JsonProperty(\"MARKET\")] public string Market { get; set; } Property Value Type Description String MarketCap Declaration [JsonProperty(\"MKTCAP\")] public string MarketCap { get; set; } Property Value Type Description String Open24Hour Declaration [JsonProperty(\"OPEN24HOUR\")] public string Open24Hour { get; set; } Property Value Type Description String OpenDay Declaration [JsonProperty(\"OPENDAY\")] public string OpenDay { get; set; } Property Value Type Description String Price Declaration [JsonProperty(\"PRICE\")] public string Price { get; set; } Property Value Type Description String Supply Declaration [JsonProperty(\"SUPPLY\")] public string Supply { get; set; } Property Value Type Description String ToSymbol Declaration [JsonProperty(\"TOSYMBOL\")] public string ToSymbol { get; set; } Property Value Type Description String TotalVolume24H Declaration [JsonProperty(\"TOTALVOLUME24H\")] public string TotalVolume24H { get; set; } Property Value Type Description String TotalVolume24HTo Declaration [JsonProperty(\"TOTALVOLUME24HTO\")] public string TotalVolume24HTo { get; set; } Property Value Type Description String Volume24Hour Declaration [JsonProperty(\"VOLUME24HOUR\")] public string Volume24Hour { get; set; } Property Value Type Description String Volume24HourTo Declaration [JsonProperty(\"VOLUME24HOURTO\")] public string Volume24HourTo { get; set; } Property Value Type Description String VolumeDay Declaration [JsonProperty(\"VOLUMEDAY\")] public string VolumeDay { get; set; } Property Value Type Description String VolumeDayTo Declaration [JsonProperty(\"VOLUMEDAYTO\")] public string VolumeDayTo { get; set; } Property Value Type Description String"
  },
  "api/CryptoCompare.MiningEquipment.html": {
    "href": "api/CryptoCompare.MiningEquipment.html",
    "title": "Class MiningEquipment | CryptoCompare C# client",
    "keywords": "Class MiningEquipment Inheritance Object MiningData MiningEquipment Inherited Members MiningData.AffiliateUrl MiningData.Algorithm MiningData.Company MiningData.Cost MiningData.CurrenciesAvailable MiningData.CurrenciesAvailableLogo MiningData.CurrenciesAvailableName MiningData.Currency MiningData.HashesPerSecond MiningData.Id MiningData.LogoUrl MiningData.Name MiningData.ParentId MiningData.Recommended MiningData.Sponsored MiningData.Url Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : CryptoCompare Assembly : CryptoCompare.dll Syntax public class MiningEquipment : MiningData Properties EquipmentType Declaration public string EquipmentType { get; set; } Property Value Type Description String PowerConsumption Declaration public string PowerConsumption { get; set; } Property Value Type Description String"
  }
}